<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘渣渣的Blog</title>
  
  <subtitle>好奇 专注 保持进步</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.cocoathinking.com/"/>
  <updated>2019-12-04T14:28:22.362Z</updated>
  <id>https://www.cocoathinking.com/</id>
  
  <author>
    <name>刘渣渣</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://www.cocoathinking.com/2019/12/04/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%20---%20pthread%E5%92%8CNSThread/"/>
    <id>https://www.cocoathinking.com/2019/12/04/iOS多线程 --- pthread和NSThread/</id>
    <published>2019-12-04T14:28:22.362Z</published>
    <updated>2019-12-04T14:28:22.362Z</updated>
    
    <content type="html"><![CDATA[<p>#iOS多线程 — pthread和NSThread</p><hr><p>多线程，是实现多个线程并发执行的技术，对于单核CPU来说，虽然在硬件的限制下同时只能执行一个线程，但是操作系统可以快速的在不同线程之间切换，在很小的切换时间下，来给用户造成一种同时运行多个线程的假象，而对于多核CPU，因为有硬件的支持而能够在同一时间同时运行多个线程<br>iOS中有以下几种线程方案</p><ol><li>Pthread</li><li>NSThread</li><li>GCD</li><li>NSOperationQueue</li></ol><h2 id="Pthread"><a href="#Pthread" class="headerlink" title="Pthread"></a>Pthread</h2><p>Pthread是一套通用的多线程方案，可以在类Unix操作系统（如Unix，Linux，Mac OS)等系统使用，它使用C语言编写，需要程序员自己管理线程的生命周期，使用难度较大，在开发中几乎不会直接使用它。</p><p>使用pthread创建一个线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//声明一个thread变量</span><br><span class="line">pthread_t thread;</span><br><span class="line"></span><br><span class="line">//创建并开启thread，执行test函数</span><br><span class="line">pthread_create(&amp;thread, NULL, test, NULL);</span><br><span class="line"></span><br><span class="line">//设置该线程的状态为detach，使该线程执行结束后自动释放所有资源</span><br><span class="line">pthread_detach(thread);</span><br><span class="line">NSLog(@&quot;Current Thread1:%@&quot;, [NSThread currentThread]); //打印结果：Current Thread1:&lt;NSThread: 0x60000360acc0&gt;&#123;number = 1, name = main&#125;</span><br><span class="line"></span><br><span class="line">void *test(void *param)&#123;</span><br><span class="line">    NSLog(@&quot;Current Thread12:%@&quot;, [NSThread currentThread]);//打印结果：Current Thread1:&lt;NSThread: 0x60000361ad00&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-12-04 21:37:25.502129+0800 Thread[2601:163643] Current Thread2:&lt;NSThread: 0x600002aa5040&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2019-12-04 21:37:25.503243+0800 Thread[2601:163558] Current Thread1:&lt;NSThread: 0x600002ad5040&gt;&#123;number = 1, name = main&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到在pthread中通过pthread_create函数来创建线程，pthread_create(&amp;thread, NULL, test, NULL)有四个参数,各项参数含义如下：</p><p>第一个参数：指向线程（标识符）的指针<br>第二个参数：用来设置线程属性  ，通常设置为NULL<br>第三个参数：线程运行的函数地址<br>第四个参数：运行函数的参数<br>其中第一、二个参数比较简单，这里再额外介绍一下第三四个参数，<br>第三个参数”线程属性“是一个pthread_attr_t类型的结构体，这个结构体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">    &#123;</span><br><span class="line">        int detachstate;   //线程的分离状态</span><br><span class="line">        int schedpolicy;   //线程调度策略</span><br><span class="line">        struct sched_param schedparam;  //线程的调度参数</span><br><span class="line">        int inheritsched;  //线程的继承性</span><br><span class="line">        int scope;         //线程的作用域</span><br><span class="line">        size_t guardsize;  //线程栈末尾的警戒缓冲区大小</span><br><span class="line">        int stackaddr_set;</span><br><span class="line">        void *stackaddr;   //线程栈的位置</span><br><span class="line">        size_t stacksize;  //线程栈的大小</span><br><span class="line">&#125;pthread_attr_t;</span><br></pre></td></tr></table></figure></p><p>要使用pthread_attr_t我们需要对它进行初始化，使用后还要去初始化<br>pthread_attr_t初始化函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_attr_init()</span><br></pre></td></tr></table></figure></p><p>pthread_attr_t去初始化函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_attr_destory()</span><br></pre></td></tr></table></figure></p><p>pthread_attr_init之后，pthread_t结构所包含的内容就是操作系统实现支持的线程所有属性的默认值</p><p>如果想修改这些默认值，pthread_attr_t的每一个属性都有相应的函数对其进行查看和修改</p><p>比如修改分离状态可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int pthread_attr_getdetachstate(const pthread_attr_t * attr, int * detachstate);</span><br><span class="line">int pthread_attr_setdetachstate(pthread_attr_t * attr, int detachstate);</span><br></pre></td></tr></table></figure></p><p>设置的时候可以有两种选择：<br>            <1>.detachstate参数为：PTHREAD_CREATE_DETACHED     分离状态启动<br>            <2>.detachstate参数为：PTHREAD_CREATE_JOINABLE    正常启动线程</2></1></p><p>线程的继承性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int pthread_attr_getinheritsched(const pthread_attr_t *attr,int *inheritsched);</span><br><span class="line">int pthread_attr_setinheritsched(pthread_attr_t *attr,int inheritsched);</span><br></pre></td></tr></table></figure></p><p>参数支持：<br> PTHREAD_INHERIT_SCHED： 新的线程继承创建线程的策略和参数<br> PTHREAD_EXPLICIT_SCHED：新的线程继承策略和参数来自于 schedpolicy和schedparam属性中显式 设置的调度信息</p><p> pthread_attr_t的其他属性都有相应的函数来修改，这里就不一一介绍了，感兴趣的同学可以在stackoverflow的<a href="https://stackoverflow.com/questions/43022867/when-pthread-attr-t-is-not-null" title="when pthread_attr_t is not NULL?" target="_blank" rel="noopener">when pthread_attr_t is not NULL?</a>问题中了解到更多信息</p><p> 第四个参数：<br>运行函数传递的参数，当传递单个参数时，可以直接定义一个变量传递给线程函数，当需要传递多个参数时候，就需要创建一个结构体来包含所有的参数，然后再传入线程函数：</p><p>传单个参数的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//定义一个函数</span><br><span class="line">void *test(void *param)&#123;</span><br><span class="line">    NSLog(@&quot;test:%d&quot;, *(int *)param);</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明变量，创建线程，调用函数传递参数</span><br><span class="line">int i = 100;</span><br><span class="line">pthread_create(&amp;thread, NULL, test, &amp;i);</span><br><span class="line">pthread_detach(thread);</span><br></pre></td></tr></table></figure><p>传多个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//定义一个结构体</span><br><span class="line">struct parameters&#123;</span><br><span class="line">    int size;</span><br><span class="line">    int count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//定义函数</span><br><span class="line">void *test(void *param)&#123;</span><br><span class="line">    struct paramaters *args;</span><br><span class="line">    args = (struct paramaters *)param;</span><br><span class="line">    NSLog(@&quot;test:size:%d， count:%d&quot;, args-&gt;size, args-&gt;count);</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明结构体变量，结构体赋值，创建线程，调用函数传递参数</span><br><span class="line">struct paramaters args;</span><br><span class="line">args.size = 100;</span><br><span class="line">args.count = 300;</span><br><span class="line">pthread_create(&amp;thread, NULL, test, &amp;args);</span><br><span class="line">pthread_detach(thread);</span><br></pre></td></tr></table></figure><p>除了pthread_create，Pthread 还有以下相关函数：</p><ul><li>pthread_exit() 终止当前线程</li><li>pthread_cancel() 中断另外一个线程的运行</li><li>pthread_join() 阻塞当前的线程，直到另外一个线程运行结束</li><li>pthread_attr_init() 初始化线程的属性</li><li>pthread_attr_setdetachstate() 设置脱离状态的属性（决定这个线程在终止时是否可以被结合）</li><li>pthread_attr_getdetachstate() 获取脱离状态的属性</li><li>pthread_attr_destroy() 删除线程的属性</li><li>pthread_kill() 向线程发送一个信号</li></ul><p>我们通常并不会直接使用pthread来管理线程，所以对pthread不再做过多的介绍</p><h2 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h2><p>NSThread和pthread都是对内核 mach kernal的mach thread的封装，不同的是NSThread是由苹果官方提供的，可以直接操作线程对象，使用起来比pthread更加易用，不过仍需要自己管理生命周期、同步、加锁的问题</p><p>创建线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//先创建线程，再启动线程</span><br><span class="line">NSThread *thread = [[NSThread alloc]initWithTarget:self selector:@selector(sailTickets) object:nil];</span><br><span class="line">[thread start];</span><br><span class="line">//先创建线程后自动启动线程</span><br><span class="line">[NSThread detachNewThreadSelector:@selector(test) toTarget:self withObject:nil];</span><br><span class="line">//隐式创建并启动线程</span><br><span class="line">[self performSelectorInBackground:@selector(test) withObject:nil];</span><br></pre></td></tr></table></figure></p><p>线程相关方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 获得主线程</span><br><span class="line">+ (NSThread *)mainThread;    </span><br><span class="line">// 判断是否为主线程(对象方法)</span><br><span class="line">- (BOOL)isMainThread;</span><br><span class="line">// 判断是否为主线程(类方法)</span><br><span class="line">+ (BOOL)isMainThread;    </span><br><span class="line">// 获得当前线程</span><br><span class="line">NSThread *current = [NSThread currentThread];</span><br><span class="line">// 线程的名字——setter方法</span><br><span class="line">- (void)setName:(NSString *)n;    </span><br><span class="line">// 线程的名字——getter方法</span><br><span class="line">- (NSString *)name;</span><br></pre></td></tr></table></figure></p><p>线程状态控制方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)start;// 线程进入就绪状态 -&gt; 运行状态。当线程任务执行完毕，自动进入死亡状态</span><br><span class="line">+ (void)sleepUntilDate:(NSDate *)date;// 线程进入阻塞状态</span><br><span class="line">+ (void)sleepForTimeInterval:(NSTimeInterval)ti;// 线程进入阻塞状态</span><br><span class="line">+ (void)exit;// 线程进入死亡状态</span><br></pre></td></tr></table></figure></p><p>线程之间的通信<br>在开发中，我们经常会在子线程进行耗时操作，操作结束后再回到主线程去刷新 UI。这就涉及到了子线程和主线程之间的通信。我们先来了解一下官方关于 NSThread 的线程间通信的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 在主线程上执行操作</span><br><span class="line">- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait;</span><br><span class="line">- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray&lt;NSString *&gt; *)array;</span><br><span class="line"></span><br><span class="line">// 在指定线程上执行操作</span><br><span class="line">- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array NS_AVAILABLE(10_5, 2_0);</span><br><span class="line">- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(id)arg waitUntilDone:(BOOL)wait NS_AVAILABLE(10_5, 2_0);</span><br><span class="line"></span><br><span class="line">// 在当前线程上执行操作，调用 NSObject 的 performSelector:相关方法</span><br><span class="line">- (id)performSelector:(SEL)aSelector;</span><br><span class="line">- (id)performSelector:(SEL)aSelector withObject:(id)object;</span><br><span class="line">- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;</span><br></pre></td></tr></table></figure><p>线程的五个状态<br>New  Runnabled  Running  Blocked  Dead</p><p>New:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(threadDemo) object:nil];</span><br></pre></td></tr></table></figure></p><p>Runnabled：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[thread start];</span><br></pre></td></tr></table></figure></p><p>Running<br>CPU负责调度可调度线程池中的处于就绪状态的线程，线程在执行结束之前，状态可能在就绪和运行之间来回的切换，就绪和运行之间的状态切换由CPU来完成，我们无法干涉</p><p>阻塞<br>正在运行的线程，当满足某个条件时，可以用休眠或者锁来阻塞线程的执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//sleepForTimeInterval:休眠指定时长</span><br><span class="line">[NSThread sleepForTimeInterval:1.0];</span><br><span class="line">//sleepUntilDate:休眠到指定日期</span><br><span class="line">[NSThread sleepUntilDate:[NSDate dateWithTimeIntervalSinceNow:1.0]];</span><br><span class="line">//互斥锁</span><br><span class="line">@synchronized(self)</span><br></pre></td></tr></table></figure></p><p>Dead<br>线程正常死亡：线程执行结束<br>线程非正常死亡：线程突然崩溃/当满足某个条件后，在线程内部强制退出，调用exit方法</p><p>关于exit需要注意的地方：<br>不能在主线程中调用该方法.会使主线程退出.<br>当当前线程死亡之后,这个线程中的代码都不会被执行.<br>在调用此方法之前一定要注意释放之前由C语言框架创建的对象</p><p>线程状态的转换<br>当我们创建了一个线程，执行start方法后，系统把线程放入可调度线程池中，此时线程进入就绪（Runnabled）状态<br>如果CPU调度当前线程，则当前线程进入运行状态，当CPU调度其他线程，则当前线程回到就绪状态<br>如果系统在运行当前线程时候调用了sleep方法/等待同步锁，则当前线程进入阻塞状态，等到sleep到时/得到同步锁，则回到就绪状态<br>如果系统在运行当前线程对象的时候线程任务执行完毕/异常强制退出，则当前线程对象进入死亡状态</p><p>线程常驻<br>在一些场景中需要用到常驻线程，要使线程常驻就需要用到RunLoop，每个线程都有一个RunLoop这是默认没有开启，RunLoop的开启就意味着线程的常驻，比如主线程</p><p>下边这段代码来自AFNetworking<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+ (NSThread *)networkRequestThread &#123;</span><br><span class="line">    static NSThread *_networkRequestThread = nil;</span><br><span class="line">    static dispatch_once_t oncePredicate;</span><br><span class="line">    dispatch_once(&amp;oncePredicate, ^&#123;</span><br><span class="line">        _networkRequestThread = [[NSThread alloc] initWithTarget:self selector:@selector(networkRequestThreadEntryPoint:) object:nil];</span><br><span class="line">        [_networkRequestThread start];</span><br><span class="line">    &#125;);</span><br><span class="line">    return _networkRequestThread;</span><br><span class="line">&#125;</span><br><span class="line">+ (void)networkRequestThreadEntryPoint:(id)__unused object &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        [[NSThread currentThread] setName:@&quot;AFNetworking&quot;];</span><br><span class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</span><br><span class="line">        [runLoop addPort:[NSMachPort port] forMode:NSDefaultRunLoopMode];</span><br><span class="line">        [runLoop run];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的_networkRequestThread就属于常驻线程，可以看到要想创建一个常驻线程，只要以下几步：<br>1.创建一个全局的thread变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) NSThread *networkThread;</span><br></pre></td></tr></table></figure></p><p>2.初始化线程并启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.networkThread = [[NSThread alloc]initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line">[self.networkThread start];</span><br></pre></td></tr></table></figure></p><p>3.在线程中开启RunLoop，子线程中的RunLoop是默认关闭的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)run&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">    [[NSRunLoop currentRunLoop] addPort:[NSPort port] forMode:NSDefaultRunLoopMode];</span><br><span class="line">    [[NSRunLoop currentRunLoop] run];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在networkThread已经实现了常驻，当需要使用它的时候可以这么调用<br>4.利用常驻线程处理任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self performSelector:@selector(action) onThread:self.networkThread withObject:nil waitUntilDone:NO ];</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#iOS多线程 — pthread和NSThread&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;多线程，是实现多个线程并发执行的技术，对于单核CPU来说，虽然在硬件的限制下同时只能执行一个线程，但是操作系统可以快速的在不同线程之间切换，在很小的切换时间下，来给用户造成一种同时运行多个线程的假
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>栈的最佳实践 - 打造一个逆波兰计算器</title>
    <link href="https://www.cocoathinking.com/2019/04/23/%E6%A0%88%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>https://www.cocoathinking.com/2019/04/23/栈的最佳实践-打造一个逆波兰计算器/</id>
    <published>2019-04-23T06:44:03.000Z</published>
    <updated>2019-04-23T06:50:46.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h3><p>栈的应用很多，可以检查程序中的符号是否都成对的出现，每一个右括号都应该有一个对应的左括号，可以用栈来实现进制的转换，当然还有今天的主题，利用栈来实现一个逆波兰计算器</p><h3 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h3><p>逆波兰表达式（Reverse Polish Notation 简称RPN），又称为后缀表达式，作为比较，我们常用的中序表达式表示方法是操作符位于操作数中间，比如 1 + 2，这里操作符+位于操作数1和2中间，而后缀表达式的表示方法是操作符位于两个操作数中间，比如1 2 +，这里的操作符+位于两个操作数1 2后边。总结来说RPN的特点就是表达式中各个运算是按运算符出现的顺序进行的，故无须使用括号来指示运算顺序</p><p>下边给出一些表达式的两种表示方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 + 2            1 2 +</span><br><span class="line">1 + 2 * 3        1 2 3 * +</span><br><span class="line">1 - ( 3 + 1 )    1 3 1 + -</span><br></pre></td></tr></table></figure></p><p>从上面的例子可以看出：</p><ol><li>在两种表示中，运算对象出现的顺序相同；</li><li>在后缀表示中，运算符按实际计算顺序从左到右排列，且每一运算符总是跟在其运算对象之后。</li></ol><p><strong>逆波兰表达示的优势就在于我们只需要两种简单的操作入栈和出栈，就可以实现简单表达式的运算</strong></p><h3 id="中序表达式转换为逆波兰表达式"><a href="#中序表达式转换为逆波兰表达式" class="headerlink" title="中序表达式转换为逆波兰表达式"></a>中序表达式转换为逆波兰表达式</h3><p>首先需要分配两个栈，一个是用来存储临时操作符的栈S1，还有一个用来存储逆波兰表达式的栈S2</p><p>从中序表达式的左端取字符，逐一执行以下操作</p><ol><li>若取出的字符是操作数，直接将操作数送入S2栈</li><li>若取出的字符是运算符，则将该运算符与S1栈栈顶元素比较，如果该运算符优先级大于S1栈栈顶运算符优先级，则将该运算符进S1栈，否则，将S1栈的栈顶运算符弹出，送入S2栈中，直至S1栈栈顶运算符低于（不包括等于）该运算符优先级，则将该运算符送入S1栈。</li><li>若取出的字符是“（”，则直接送入S1栈栈顶。</li><li>若取出的字符是“）”，则将距离S1栈栈顶最近的“（”之间的运算符，逐个出栈，依次送入S2栈，此时抛弃“（”。</li><li>重复上面的1~4步，直至处理完所有的输入字符</li><li>若取出的字符是“#”，则将S1栈内所有运算符（不包括“#”），逐个出栈，依次送入S2栈。<br>完成以上步骤，S2栈便为逆波兰式输出结果。不过不要忘记S2栈要做一下逆序处理</li></ol><h3 id="计算的逻辑"><a href="#计算的逻辑" class="headerlink" title="计算的逻辑"></a>计算的逻辑</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;栈的介绍&quot;&gt;&lt;a href=&quot;#栈的介绍&quot; class=&quot;headerlink&quot; title=&quot;栈的介绍&quot;&gt;&lt;/a&gt;栈的介绍&lt;/h3&gt;&lt;p&gt;栈的应用很多，可以检查程序中的符号是否都成对的出现，每一个右括号都应该有一个对应的左括号，可以用栈来实现进制的转换，当然还有
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS中Active与JS的交互</title>
    <link href="https://www.cocoathinking.com/2019/04/22/iOS%E4%B8%ADActive%E4%B8%8EJS%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
    <id>https://www.cocoathinking.com/2019/04/22/iOS中Active与JS的交互/</id>
    <published>2019-04-22T08:46:30.917Z</published>
    <updated>2019-04-22T09:02:13.970Z</updated>
    
    <content type="html"><![CDATA[<p>iOS原生代码和HTML中的JS进行交互有以下几种方法</p><ol><li>拦截URL</li><li>使用JavaScriptCore</li><li>使用WKScriptMessageBridge</li><li>使用开源框架WebViewJavascriptBridge</li></ol><p>这几种方法各有特点，其中 方法1、2、4可以进行iOS 、Android跨平台操作 方法3只支持iOS平台，如果想要使用1套js支持iOS Android两端，那么使用使用WKScriptMessageBridge可以排除在外</p><h2 id="拦截URL"><a href="#拦截URL" class="headerlink" title="拦截URL"></a>拦截URL</h2><h3 id="js调用原生代码"><a href="#js调用原生代码" class="headerlink" title="js调用原生代码"></a>js调用原生代码</h3><p>拦截url使用比较简单，和后端同事协商好URL协议，比如jsaction://openAlbum表示打开相册<br>实现UIWebView的代理方法：shouldStartLoadWithRequest:navigationType，在方法中对url进行拦截判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;</span><br><span class="line">if ([request.URL.absoluteString hasPrefix:@&quot;jsaction://openAlbum</span><br><span class="line">//调用原生扫描二维码</span><br><span class="line">return NO;</span><br><span class="line">&#125;</span><br><span class="line">return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;jsaction://openAlbum&quot;&gt;扫一扫(拦截url)&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h3 id="原生调用js代码："><a href="#原生调用js代码：" class="headerlink" title="原生调用js代码："></a>原生调用js代码：</h3><p>在打开相册后如果想反馈给HTML页面，可以执行UIWebView的stringByEvaluatingJavaScriptFromString:方法，或者WKWebView的 evaluateJavaScript:completionHandler:方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.webView stringByEvaluatingJavaScriptFromString:@&quot;openResult(‘成功打开相册&apos;)”];</span><br></pre></td></tr></table></figure></p><p>拦截URL使用简单，js端只要约定好url协议就可以，但是缺点同样明显，代理方法中讲充斥大量判断URL的硬编码，约定好的连接都是写死的，而且通信是单向的，不支持return和callBack，只能做send操作，不能做get操作，所以拦截URL适用于业务相对简单的需求。</p><h2 id="使用JavaScriptCore"><a href="#使用JavaScriptCore" class="headerlink" title="使用JavaScriptCore"></a>使用JavaScriptCore</h2><p>JavaScriptCore只支持UIWebView，支持系统版本为iOS7+<br>通过 JSContext 获取 UIWebView 的 JS 执行上下文。<br>然后通过这个上下文，进行 OC &amp; JS 的双端交互。</p><h3 id="js调用原生"><a href="#js调用原生" class="headerlink" title="js调用原生"></a>js调用原生</h3><p>你需要创建一个对象继承自NSObject，并遵循JSExport协议，代理的方法和js的方法保持一致，.m中实现代理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//JSObject.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;</span><br><span class="line">@protocol JSObjectDelegate &lt;JSExport&gt;</span><br><span class="line">-(void)openAlbum:(NSString *)message;</span><br><span class="line">@end</span><br><span class="line">@interface JSObject : NSObject&lt;JSObjectDelegate&gt;</span><br><span class="line">@property(nonatomic,weak) id&lt;AppJSObjectDelegate&gt; delegate;</span><br><span class="line">@end</span><br><span class="line">//JSObject.m</span><br><span class="line">#import &quot;AppJSObject.h&quot;</span><br><span class="line">@implementation JSObject</span><br><span class="line">-(void)openAlbum:(NSString *)message&#123;</span><br><span class="line">[self.delegate openAlbum:message];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JS代码：</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function openAlbum()&#123;</span><br><span class="line">app.scan(‘openResult&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function openResult(result)&#123;</span><br><span class="line">document.getElementById(&quot;result&quot;).innerHTML = ‘打开结果：&apos; + result;  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在UIWebView加载完成的代理中把SObject实例对象类注入到JS中，那么在js中调用方法就会调用到原生JSObject实例对象中对应的方法了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-(void)webViewDidFinishLoad:(UIWebView *)webView</span><br><span class="line">&#123;</span><br><span class="line">JSContext *context=[webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">JSObject *jsObject = [JSObject new];</span><br><span class="line">jsObject.delegate = self;</span><br><span class="line">context[@&quot;app&quot;] = jsObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="原生调用js"><a href="#原生调用js" class="headerlink" title="原生调用js"></a>原生调用js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context=[_mainWebView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br><span class="line">NSString *alertJS= [NSString stringWithFormat:@&quot;%@(&apos;%@&apos;)&quot;,_photoMethod,fileUrl];</span><br><span class="line">[context evaluateScript:alertJS];</span><br></pre></td></tr></table></figure><p>JavaScriptCore 是跨平台的，你不需要在代理方法中添加大量的硬编码，支持双向的return，js调用原生方法可以拿到return，native调用js也可以拿到return，缺点就是JavaScriptCore只支持UIWebView不支持WKWebView，而UIWebView在内存优化，加载速度上都存在一些问题，所以使用JavaScriptCore的话只能舍弃WKWebView，而且只支持return，不支持callback，所以在异步调用的时候拿不动返回值。</p><h2 id="WKScriptMessageBridge"><a href="#WKScriptMessageBridge" class="headerlink" title="WKScriptMessageBridge"></a>WKScriptMessageBridge</h2><p>我们之前说过，WKScriptMessageBridge无法做到跨平台，所以这里做一个简单介绍：<br>通过 userContentController 把需要观察的 JS 执行函数注册起来。<br>然后通过一个协议方法，将所有注册过的 JS 函数执行的参数传递到此协议方法中。<br>初始化WKWebView时，调用addScriptMessageHandler:name:方法，name为js中的方法名，如openAlbum:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)setupWKWebView&#123;</span><br><span class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</span><br><span class="line">configuration.userContentController = [[WKUserContentController alloc] init];</span><br><span class="line">[configuration.userContentController addScriptMessageHandler:self name:@&quot;openAlbum&quot;];</span><br><span class="line">WKWebView *webView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:configuration];</span><br><span class="line">webView.UIDelegate = self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.webkit.messageHandlers.openAlbum.postMessage()</span><br></pre></td></tr></table></figure></p><p>实现WKScriptMessageHandler代理方法，当js调用openAlbum方法时，会回调此代理方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message&#123;</span><br><span class="line">if ([message.name isEqualToString:@&quot;openAlbum&quot;]) &#123;</span><br><span class="line">//调用原生扫码</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="WebViewJavascriptBridge"><a href="#WebViewJavascriptBridge" class="headerlink" title="WebViewJavascriptBridge"></a>WebViewJavascriptBridge</h2><p>WebViewJavascriptBridge是<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">github</a>上的开源库，用于UIWebView和WKWebView中原生代码和JS的交互，另外iOS和Android的WebViewJavascriptBridge在github上不是一个地址，但是实现思路和原理都是一样的，所以可以做到跨平台使用</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>把 原生 的方法注册到桥梁中，让 JS 去调用。<br>把 JS 的方法注册在桥梁中，让 原生代码 去调用。</p><h3 id="1-install-JSBridge"><a href="#1-install-JSBridge" class="headerlink" title="1.install JSBridge"></a>1.install JSBridge</h3><p>pod ‘WebViewJavascriptBridge’, ‘~&gt; 6.0’</p><h3 id="2-导出头文件"><a href="#2-导出头文件" class="headerlink" title="2.导出头文件"></a>2.导出头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;WKWebViewJavascriptBridge.h&gt;</span><br></pre></td></tr></table></figure><h3 id="3-初始化WebView和JSBridge"><a href="#3-初始化WebView和JSBridge" class="headerlink" title="3.初始化WebView和JSBridge"></a>3.初始化WebView和JSBridge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];</span><br><span class="line">WKUserContentController *userController = [[WKUserContentController alloc] init];</span><br><span class="line">configuration.userContentController = userController;</span><br><span class="line">_mainWebView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 0, KMainWidth, KMainHeight) configuration:configuration];</span><br><span class="line">NSString *path = [[[NSBundle mainBundle] bundlePath]  stringByAppendingPathComponent:@&quot;index.html&quot;];</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL fileURLWithPath:path]];</span><br><span class="line">[_mainWebView loadRequest: request];</span><br><span class="line">self.bridge = [WKWebViewJavascriptBridge bridgeForWebView:self.mainWebView];</span><br></pre></td></tr></table></figure><h3 id="4-在js文件中加入以下两个初始化函数"><a href="#4-在js文件中加入以下两个初始化函数" class="headerlink" title="4.在js文件中加入以下两个初始化函数"></a>4.在js文件中加入以下两个初始化函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function setupWebViewJavascriptBridge(callback) &#123;</span><br><span class="line">if (window.WebViewJavascriptBridge) &#123; return callback(WebViewJavascriptBridge); &#125;</span><br><span class="line">if (window.WVJBCallbacks) &#123; return window.WVJBCallbacks.push(callback); &#125;</span><br><span class="line">window.WVJBCallbacks = [callback]; </span><br><span class="line">var WVJBIframe = document.createElement(&apos;iframe&apos;); </span><br><span class="line">WVJBIframe.style.display = &apos;none&apos;; // 不显示</span><br><span class="line">WVJBIframe.src = &apos;wvjbscheme://__BRIDGE_LOADED__&apos;; </span><br><span class="line">document.documentElement.appendChild(WVJBIframe); </span><br><span class="line">setTimeout(function() &#123; document.documentElement.removeChild(WVJBIframe) &#125;, 0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setupWebViewJavascriptBridge(function(bridge)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来我们描述一个场景</p><p>1.HTML中加一个按钮，点击调用原生代码 ，随机修改一个colorView的背景颜色<br>2.原生页面添加一个按钮，点击调用js代码，用来修改HTML页面颜色</p><p>在原生代码中注册一个修改colorView背景颜色的block<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[self.bridge registerHandler:@&quot;colorClick&quot; handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line">self.colorView.backgroundColor = [UIColor colorWithRed:arc4random_uniform(256) / 255.0 green:arc4random_uniform(256) / 255.0 blue:arc4random_uniform(256) / 255.0 alpha:1.0];</span><br><span class="line">responseCallback(@&quot;颜色修改完毕!&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>在js文件里找到button的点击事件，添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge.callHandler(&apos;colorClick&apos;,function(dataFromOC) &#123;</span><br><span class="line">alert(&quot;JS 调用了 OC 注册的 colorClick 方法&quot;);</span><br><span class="line">document.getElementById(&quot;returnValue&quot;).value = dataFromOC;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>此时我们就完成了HTML中点击按钮，修改原生代码中colorView的背景颜色，接下来继续<br>在JS中添加一个function 用来修改body的背景颜色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setupWebViewJavascriptBridge(function(bridge)&#123;</span><br><span class="line">bridge.registerHandler(&apos;changeBGColor&apos;,function(data,responseCallback)&#123;</span><br><span class="line">document.body.style.backgroundColor = &quot;orange&quot;;</span><br><span class="line">document.getElementById(&quot;returnValue&quot;).value = data;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>然后在原生页面的button点击事件中添加以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.bridge callHandler:@&quot;changeBGColor&quot; data:@“修改body背景颜色为橙色”];</span><br></pre></td></tr></table></figure></p><p>现在我们就完成从js调用原生代码修改colorview的背景颜色，原生页面的button点击时修改了HTML的背景颜色。<br>关于内存泄漏<br>在页面退出时需要删除在JSBridge中注入的block，否则可能会导致页面无法释放，造成内存泄漏的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">[super viewWillDisappear:animated];</span><br><span class="line">[self.bridge removeHandler:@&quot;colorClick&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="关于传参"><a href="#关于传参" class="headerlink" title="关于传参"></a>关于传参</h3><p>在OC和JS相互调用时候支持传递参数和添加回调</p><h4 id="OC调用JS"><a href="#OC调用JS" class="headerlink" title="OC调用JS"></a>OC调用JS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[self.bridg callHandler:@&quot;changeBGColor&quot;];</span><br><span class="line">[self.bridg callHandler:@&quot;changeBGColor&quot; data:@&quot;修改body背景颜色为橙色&quot;];</span><br><span class="line">[self.bridg callHandler:@&quot;changeBGColor&quot; data:@&quot;传递给 JS 的参数&quot; responseCallback:^(id responseData) &#123;</span><br><span class="line">NSLog(@&quot;JS 的返回值: %@&quot;,responseData);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>#####JS调用OC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WebViewJavascriptBridge.callHandler(&apos;scanClick&apos;);</span><br><span class="line">WebViewJavascriptBridge.callHandler(&apos;scanClick&apos;,&quot;JS 参数&quot;);</span><br><span class="line">WebViewJavascriptBridge.callHandler(&apos;scanClick&apos;,&#123;data : &quot;这是 JS 传递到 OC 的扫描数据&quot;&#125;,function(dataFromOC)&#123;</span><br><span class="line">alert(&quot;JS 调用了 OC 的扫描方法!&quot;);</span><br><span class="line">document.getElementById(&quot;returnValue&quot;).value = dataFromOC;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>到这里WebViewJavascriptBridge就介绍完了，可以看到使用起来也很简单，你可以到<a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a>的github主页上查看更多的信息。</p><p>WebViewJavascriptBridge虽然是一个三方库，但是已经是一个很成熟原生与JS交互的解决方案，在他的主页上可以看到Facbook也在使用它，WebViewJavascriptBridge特点是跨品台的，支持双向callback，可以异步回调，这也是我们项目组在用的方案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;iOS原生代码和HTML中的JS进行交互有以下几种方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拦截URL&lt;/li&gt;
&lt;li&gt;使用JavaScriptCore&lt;/li&gt;
&lt;li&gt;使用WKScriptMessageBridge&lt;/li&gt;
&lt;li&gt;使用开源框架WebViewJavascrip
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>weak-strong dance</title>
    <link href="https://www.cocoathinking.com/2019/03/14/weak-strong-dance/"/>
    <id>https://www.cocoathinking.com/2019/03/14/weak-strong-dance/</id>
    <published>2019-03-14T14:25:57.000Z</published>
    <updated>2019-03-14T14:26:05.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之所有要写这篇weak-strong-dance，是因为一个同事在聊天时表达了对这种写法困惑，在block中为什么要重新使用strong来修饰觉得没有必要，所以我写下这篇文章一来可以为他解惑，二来如果能帮助更多的同学理解weak-strong-dance就再好不过了</p></blockquote><p>我们在使用RAC的时候经常会用到两个宏：@weakify(self)和@strongify(self)，这两个宏等价于 <strong>weak typeof(self) weakSelf = self; 和  </strong>strong typeof(self) strongSelf = weakSelf;，其实就是使用weak 和 strong来修饰当前的self对象。rac中用到了大量的block，在block中使用weak我们知道是为了防止循环引用，那么重新修饰成strong类型有什么作用呢？其实这里的weak和strong有一个美丽的名字：weak-strong dance</p><p>之前我们已经介绍了，在block中调用外部属性，为了避免循环引用，我们需要使用weak来修饰对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface ViewController ()</span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (void)blockTest&#123;</span><br><span class="line">__weak typeof (self)weakSelf = self;</span><br><span class="line">void(^test)(void) = ^&#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, weakSelf.name);</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里我们使用weak修饰了self，从而避免了循环引用的问题，但是使用weak是不是就能解决所有的问题呢？我们来看一下这个场景：</p><ol><li>有两个ViewController， A 和 B</li><li>在A中点击按钮跳转到B</li><li>B中设置两个定时任务<br>1)定时任务1：3s的时候执行dismissViewController方法<br>2)定时任务2：在任务1中设置6s后打印一个属性变量name<br>ok，需求很简单，我们来看一下B VC的代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@interface BViewController ()</span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad&#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">self.view.backgroundColor = UIColor.whiteColor;</span><br><span class="line">self.name = @&quot;kate&quot;;</span><br><span class="line">__weak typeof(self) weakSelf = self;</span><br><span class="line">void (^test)(void) = ^&#123;</span><br><span class="line"></span><br><span class="line">[NSTimer scheduledTimerWithTimeInterval:3 repeats:NO block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">NSLog(@&quot;3s后&quot;);</span><br><span class="line">[weakSelf dismissViewControllerAnimated:YES completion:nil];</span><br><span class="line">[NSTimer scheduledTimerWithTimeInterval:6 repeats:NO block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">NSLog(@&quot;6s后&quot;);</span><br><span class="line">NSLog(@&quot;%@&quot;, weakSelf.name);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc&#123;</span><br><span class="line">NSLog(@&quot;dealloc&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的执行结果是怎样的呢，大家可以先思考一下</p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-03-12 14:49:09.585089+0800 Block[3543:669240] 3s后</span><br><span class="line">2019-03-12 14:49:10.091926+0800 Block[3543:669240] dealloc</span><br><span class="line">2019-03-12 14:49:15.587989+0800 Block[3543:669240] 6s后</span><br><span class="line">2019-03-12 14:49:15.588211+0800 Block[3543:669240] (null)</span><br></pre></td></tr></table></figure></p><p>可以看到，因为3s后B视图被销毁，使用weak修饰的self变成了nil，name自然就无法打印出来。</p><p>在这种情况下，我们使用上文中提到的weak-strong dance就可以完美解决：</p><p>B视图修改后的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad&#123;</span><br><span class="line">[super viewDidLoad];</span><br><span class="line">self.view.backgroundColor = UIColor.whiteColor;</span><br><span class="line">self.name = @&quot;kate&quot;;</span><br><span class="line">__weak typeof(self) weakSelf = self;</span><br><span class="line">void (^test)(void) = ^&#123;</span><br><span class="line"></span><br><span class="line">[NSTimer scheduledTimerWithTimeInterval:3 repeats:NO block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">__strong typeof(self) strongSelf = weakSelf;</span><br><span class="line">NSLog(@&quot;3s后&quot;);</span><br><span class="line">[strongSelf dismissViewControllerAnimated:YES completion:nil];</span><br><span class="line">[NSTimer scheduledTimerWithTimeInterval:6 repeats:NO block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">NSLog(@&quot;6s后&quot;);</span><br><span class="line">NSLog(@&quot;%@&quot;, strongSelf.name);</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;;</span><br><span class="line">test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们只是在timer内容使用strong重新修饰了weakSelf，然后使用strongSelf调用了相应的方法和属性<br>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-03-12 14:56:37.647339+0800 Block[3648:695087] 3s后</span><br><span class="line">2019-03-12 14:56:43.649361+0800 Block[3648:695087] 6s后</span><br><span class="line">2019-03-12 14:56:43.649604+0800 Block[3648:695087] kate</span><br><span class="line">2019-03-12 14:56:43.649789+0800 Block[3648:695087] dealloc</span><br></pre></td></tr></table></figure></p><p>我们可以看到 name属性可以被打印出来了</p><p>看到这里，大家应该都认识了weak-storng dance，其实weak-storng dance主要解决的就是当block执行了一半时候被销毁，导致block内部出现的一些异常问题，比如视图被销毁，block在多线程中被销毁等情况，所以为了我们的代码更加健壮，请尽量使用weak-storng dance把。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;之所有要写这篇weak-strong-dance，是因为一个同事在聊天时表达了对这种写法困惑，在block中为什么要重新使用strong来修饰觉得没有必要，所以我写下这篇文章一来可以为他解惑，二来如果能帮助更多的同学理解weak-strong-da
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>block</title>
    <link href="https://www.cocoathinking.com/2019/03/14/block/"/>
    <id>https://www.cocoathinking.com/2019/03/14/block/</id>
    <published>2019-03-14T14:17:36.000Z</published>
    <updated>2019-03-14T14:19:02.555Z</updated>
    
    <content type="html"><![CDATA[<p>说到Block，首先要介绍一下闭包（closure）,这是闭包在<a href="https://en.wikipedia.org/wiki/Closure_(computer_programming" target="_blank" rel="noopener">wiki</a>)中的介绍：</p><blockquote><p>In programming languages, a closure, also lexical closure or function closure, is a technique for implementing lexically scoped name binding in a language with first-class functions. Operationally, a closure is a record storing a function[a] together with an environment.[1] The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created.[b] Unlike a plain function, a closure allows the function to access those captured variables through the closure’s copies of their values or references, even when the function is invoked outside their scope.</p></blockquote><blockquote><p>闭包是一个函数或者是一个带有引用环境的函数，这个环境是一张存有这个函数中所有非本地变量的表</p></blockquote><p>各种编程语言对闭包都有着自己的实现，c#有lambda，js有Closures，C++有函数对象等，而block就是苹果在OS X Snow Leopard和iOS4中开始引入的对C语言的扩展，从此广大开发者在执行数据的回调时又有了多一个选项。而且相对繁琐的delegate，block更加的灵活轻便</p><p>接下来我会从几个部分来介绍block</p><ol><li>block的内部实现</li><li>block的分类<br>###block的内部实现<br>在<a href="https://llvm.org/svn/llvm-project/compiler-rt/tags/Apple/Libcompiler_rt-10/BlocksRuntime/Block_private.h" target="_blank" rel="noopener">LLVM Block_private.h</a>中可以找Block的定义：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* Revised new layout. */</span><br><span class="line">struct Block_descriptor &#123;</span><br><span class="line">unsigned long int reserved;</span><br><span class="line">unsigned long int size;</span><br><span class="line">void (*copy)(void *dst, void *src);</span><br><span class="line">void (*dispose)(void *);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct Block_layout &#123;</span><br><span class="line">void *isa;</span><br><span class="line">int flags;</span><br><span class="line">int reserved; </span><br><span class="line">void (*invoke)(void *, ...);</span><br><span class="line">struct Block_descriptor *descriptor;</span><br><span class="line">/* Imported variables. */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到Block存在着isa指针，我们知道所有实例对象的isa指针都指向了它的类对象，类对象的isa指向了原类对象。这也符合Apple对Block的描述，block也是一个对象，它可以像其他的对象一样存放在Array和Dictionary中</p><p>在上述结构体中，最重要的是invoke变量，从声明中可以看出，这是一个函数指针，指向了block的执行代码，block的执行代码就是一个匿名函数，在创建block的时候传递给了invoke变量</p><p>Block_layout结构体中包含了一个descriptor变量，而Block_descriptor比较重要的是copy和dispose函数，从字面上来看，copy用于捕获变量并且持有引用，dispose函数用于释放捕获的变量。block捕获的变量都会存放在结构体Block_layout的后面，对于对象存储的指针，在invoke函数执行之前全部读出。</p><h3 id="block的分类"><a href="#block的分类" class="headerlink" title="block的分类"></a>block的分类</h3><p>block根据内存分步可以分为三类：<br>NSGlobalBlock 全局的静态block，不会访问任何外部变量<br>NSStackBlock 保存在栈上的block，当函数返回时会被销毁<br>NSMallocBlock 保存在堆上的block，当引用计数为0时候会被销毁</p><p>你可以使用下边代码创建出这三种block<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSString *age = @&quot;11&quot;;</span><br><span class="line">NSLog(@&quot;%@&quot;, ^&#123;&#125;);</span><br><span class="line">NSLog(@&quot;%@&quot;, ^&#123;NSLog(@&quot;%@&quot;, age);&#125;);</span><br><span class="line">void(^block)(void) = ^&#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, age);</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@&quot;%@&quot;, block);</span><br></pre></td></tr></table></figure></p><p>打印结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-14 14:38:05.435150+0800 Block[5544:702103] &lt;__NSGlobalBlock__: 0x10f6ba180&gt;</span><br><span class="line">2019-03-14 14:38:05.435306+0800 Block[5544:702103] &lt;__NSStackBlock__: 0x7ffee05459f8&gt;</span><br><span class="line">2019-03-14 14:38:05.435437+0800 Block[5544:702103] &lt;__NSMallocBlock__: 0x60000270d5f0&gt;</span><br></pre></td></tr></table></figure></p><p>接下来我们看一下这三类block在内部实现上的差别</p><h4 id="NSGlobalBlock的内部实现"><a href="#NSGlobalBlock的内部实现" class="headerlink" title="NSGlobalBlock的内部实现"></a>NSGlobalBlock的内部实现</h4><p>这里我们要使用clang命令将Objective-C代码转换成C语言来查看block的源码具体实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc block.m</span><br></pre></td></tr></table></figure></p><p>创建一个GlobalBlock.m文件，打印一个空的blog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@&quot;%@&quot;, ^&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>执行clang -rewrite-objc命令后，在目录下会多一个GlobalBlock.cpp文件，我们去除一些无用的代码，关键代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct __GlobalBlock__testBlock_block_impl_0 &#123;</span><br><span class="line">struct __block_impl impl;</span><br><span class="line">struct __GlobalBlock__testBlock_block_desc_0* Desc;</span><br><span class="line">__GlobalBlock__testBlock_block_impl_0(void *fp, struct __GlobalBlock__testBlock_block_desc_0 *desc, int flags=0) &#123;</span><br><span class="line">impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">impl.Flags = flags;</span><br><span class="line">impl.FuncPtr = fp;</span><br><span class="line">Desc = desc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __GlobalBlock__testBlock_block_func_0(struct __GlobalBlock__testBlock_block_impl_0 *__cself) &#123;</span><br><span class="line">&#125;</span><br><span class="line">static struct __GlobalBlock__testBlock_block_desc_0 &#123;</span><br><span class="line">size_t reserved;</span><br><span class="line">size_t Block_size;</span><br><span class="line">&#125; __GlobalBlock__testBlock_block_desc_0_DATA = &#123; 0, sizeof(struct __GlobalBlock__testBlock_block_impl_0)&#125;;</span><br><span class="line">static void _I_GlobalBlock_testBlock(GlobalBlock * self, SEL _cmd) &#123;</span><br><span class="line">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_cy_k1991q191tvgck18lqhnqq7c0000gn_T_GlobalBlock_2850c5_mi_0, ((void (*)())&amp;__GlobalBlock__testBlock_block_impl_0((void *)__GlobalBlock__testBlock_block_func_0, &amp;__GlobalBlock__testBlock_block_desc_0_DATA)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法 <strong>GlobalBlock</strong>testBlock_block_impl_0就是block的实现，我们可以看到 isa指向了 _NSConcreteStackBlock，这里的impl指向了<strong>main_block_func_0， </strong>main_block_func_0就是创建block时定义的一个函数。因为我们创建的block是空的，所以这里__main_block_func_0也是空的</p><h4 id="NSStackBlock的内部实现"><a href="#NSStackBlock的内部实现" class="headerlink" title="NSStackBlock的内部实现"></a>NSStackBlock的内部实现</h4><p>创建一个StackBlock.m，添加上以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *age = @&quot;11&quot;;</span><br><span class="line">NSLog(@&quot;%@&quot;, ^&#123;NSLog(@&quot;%@&quot;, age);&#125;);</span><br></pre></td></tr></table></figure></p><p>clang后获取关键代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">struct __StackGlobal__testBlock_block_impl_0 &#123;</span><br><span class="line">struct __block_impl impl;</span><br><span class="line">struct __StackGlobal__testBlock_block_desc_0* Desc;</span><br><span class="line">NSString *age;</span><br><span class="line">__StackGlobal__testBlock_block_impl_0(void *fp, struct __StackGlobal__testBlock_block_desc_0 *desc, NSString *_age, int flags=0) : age(_age) &#123;</span><br><span class="line">impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">impl.Flags = flags;</span><br><span class="line">impl.FuncPtr = fp;</span><br><span class="line">Desc = desc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __StackGlobal__testBlock_block_func_0(struct __StackGlobal__testBlock_block_impl_0 *__cself) &#123;</span><br><span class="line">NSString *age = __cself-&gt;age; // bound by copy</span><br><span class="line">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_cy_k1991q191tvgck18lqhnqq7c0000gn_T_StackGlobal_291f7c_mi_2, age);&#125;</span><br><span class="line">static void __StackGlobal__testBlock_block_copy_0(struct __StackGlobal__testBlock_block_impl_0*dst, struct __StackGlobal__testBlock_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;age, (void*)src-&gt;age, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class="line">static void __StackGlobal__testBlock_block_dispose_0(struct __StackGlobal__testBlock_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;age, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class="line">static struct __StackGlobal__testBlock_block_desc_0 &#123;</span><br><span class="line">size_t reserved;</span><br><span class="line">size_t Block_size;</span><br><span class="line">void (*copy)(struct __StackGlobal__testBlock_block_impl_0*, struct __StackGlobal__testBlock_block_impl_0*);</span><br><span class="line">void (*dispose)(struct __StackGlobal__testBlock_block_impl_0*);</span><br><span class="line">&#125; __StackGlobal__testBlock_block_desc_0_DATA = &#123; 0, sizeof(struct __StackGlobal__testBlock_block_impl_0), __StackGlobal__testBlock_block_copy_0, __StackGlobal__testBlock_block_dispose_0&#125;;</span><br><span class="line">static void _I_StackGlobal_testBlock(StackGlobal * self, SEL _cmd) &#123;</span><br><span class="line">NSString *age = (NSString *)&amp;__NSConstantStringImpl__var_folders_cy_k1991q191tvgck18lqhnqq7c0000gn_T_StackGlobal_291f7c_mi_0;</span><br><span class="line">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_cy_k1991q191tvgck18lqhnqq7c0000gn_T_StackGlobal_291f7c_mi_1, ((void (*)())&amp;__StackGlobal__testBlock_block_impl_0((void *)__StackGlobal__testBlock_block_func_0, &amp;__StackGlobal__testBlock_block_desc_0_DATA, age, 570425344)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里我们看到impl.isa指向了_NSConcreteStackBlock，<strong>StackGlobal</strong>testBlock_block_impl_0中增加了一个变量age，在block中引用的age实际上在申明block时就被就被复制到了<strong>StackGlobal</strong>testBlock_block_impl_0结构体中的变量age，心在我们就能够理解，在block内部修改变量age的内容，不会影响外部的实际变量age</p><p>在使用block时想要在block内部修改局部变量，需要使用__block来修饰局部变量，此时block的内部实现是怎样的呢<br>修改StackBlock.h中代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSString *age = @&quot;11&quot;;</span><br><span class="line">__block NSInteger index = 1;</span><br><span class="line">^&#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, age);</span><br><span class="line">index = 2;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p><p>重新执行clang,源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">struct __Block_byref_index_0 &#123;</span><br><span class="line">void *__isa;</span><br><span class="line">__Block_byref_index_0 *__forwarding;</span><br><span class="line">int __flags;</span><br><span class="line">int __size;</span><br><span class="line">NSInteger index;</span><br><span class="line">&#125;;</span><br><span class="line">struct __StackGlobal__testBlock_block_impl_0 &#123;</span><br><span class="line">struct __block_impl impl;</span><br><span class="line">struct __StackGlobal__testBlock_block_desc_0* Desc;</span><br><span class="line">NSString *age;</span><br><span class="line">__Block_byref_index_0 *index; // by ref</span><br><span class="line">__StackGlobal__testBlock_block_impl_0(void *fp, struct __StackGlobal__testBlock_block_desc_0 *desc, NSString *_age, __Block_byref_index_0 *_index, int flags=0) : age(_age), index(_index-&gt;__forwarding) &#123;</span><br><span class="line">impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">impl.Flags = flags;</span><br><span class="line">impl.FuncPtr = fp;</span><br><span class="line">Desc = desc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __StackGlobal__testBlock_block_func_0(struct __StackGlobal__testBlock_block_impl_0 *__cself) &#123;</span><br><span class="line">__Block_byref_index_0 *index = __cself-&gt;index; // bound by ref</span><br><span class="line">NSString *age = __cself-&gt;age; // bound by copy</span><br><span class="line">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_cy_k1991q191tvgck18lqhnqq7c0000gn_T_StackGlobal_274897_mi_1, age);</span><br><span class="line">(index-&gt;__forwarding-&gt;index) = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到多了一个<strong>Block_byref_index_0结构体，其中包含一个index变量， </strong>StackGlobal__testBlock_block_func_0中多了一个__Block_byref_index_0的指针，这样就可以完成修改外部变量</p><p>NSMallocBlock的内部实现<br>NSMallocBlock类型的block在源码中无法体现出来，因为NSMallocBlock是在stackblock在执行copy后才会被拷贝到malloc上，我们可以看一下<a href="https://opensource.apple.com/source/clang/clang-137/src/projects/compiler-rt/BlocksRuntime/runtime.c" target="_blank" rel="noopener">runtime.c</a>的源码，在这里可以看到block是如何从stack拷贝到malloc的<br>重点看一下_Block_copy_internal函数中这一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Its a stack block.  Make a copy.</span><br><span class="line">if (!isGC) &#123;</span><br><span class="line">struct Block_layout *result = malloc(aBlock-&gt;descriptor-&gt;size);</span><br><span class="line">if (!result) return (void *)0;</span><br><span class="line">memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); // bitcopy first</span><br><span class="line">// reset refcount</span><br><span class="line">result-&gt;flags &amp;= ~(BLOCK_REFCOUNT_MASK);    // XXX not needed</span><br><span class="line">result-&gt;flags |= BLOCK_NEEDS_FREE | 1;</span><br><span class="line">result-&gt;isa = _NSConcreteMallocBlock;</span><br><span class="line">if (result-&gt;flags &amp; BLOCK_HAS_COPY_DISPOSE) &#123;</span><br><span class="line">//printf(&quot;calling block copy helper %p(%p, %p)...\n&quot;, aBlock-&gt;descriptor-&gt;copy, result, aBlock);</span><br><span class="line">(*aBlock-&gt;descriptor-&gt;copy)(result, aBlock); // do fixup</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果判断block位于stack中，则执行copy方法<br>可以看到在这里讲isa指向了_NSConcreteMallocBlock。此时，位于stack上的block就被转成了NSMallocBlock类型的block</p><p>我们可以看到，苹果的网络请求API NSURLConnect还是用的delegate来实现回调，而到了NSURlSession，苹果更多的是换成了Block，更不要说RAC中遍布所有API中的block，所以只有你对Block有着足够深刻的理解，在使用这些框架时候才能更加的游刃有余，做到知其然知其所以然。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说到Block，首先要介绍一下闭包（closure）,这是闭包在&lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_programming&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pomera</title>
    <link href="https://www.cocoathinking.com/2019/03/12/pomera/"/>
    <id>https://www.cocoathinking.com/2019/03/12/pomera/</id>
    <published>2019-03-12T00:57:35.000Z</published>
    <updated>2019-03-12T01:44:30.865Z</updated>
    
    <content type="html"><![CDATA[<p>Η Pomera τηρεί αυστηρά τους νόμους και τους κανονισμούς και ακολουθεί τις ακόλουθες αρχές προστασίας προσωπικών δεδομένων για να σας παρέχει ασφαλέστερες και πιο αξιόπιστες υπηρεσίες:<br>1, ασφαλής και αξιόπιστη: η pomera δεν θα συλλέξει τα προσωπικά σας στοιχεία<br>2, ανεξάρτητη επιλογή: σας παρέχουμε βολικές λειτουργίες λειτουργίας, χωρίς παραπλανητική λειτουργία<br>3, προστατεύστε το μυστικό: προστατεύουμε αυστηρά το περιεχόμενο των αρχείων ανάγνωσής σας</p><p>Η Pomera είναι μια απλή και ισχυρή κάμερα ομορφιάς στο iPhone. Διαθέτουμε μια ποικιλία φίλτρων ομορφιάς για να διαλέξετε, κάθε μια από τα οποία προσεγγίζεται προσεκτικά από τους μηχανικούς μας. Ταυτόχρονα, μπορείτε να προσθέσετε εικονογραφήσεις στις φωτογραφίες σας για να κάνετε τις φωτογραφίες σας πιο ενδιαφέρουσες και ενδιαφέρουσες.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Η Pomera τηρεί αυστηρά τους νόμους και τους κανονισμούς και ακολουθεί τις ακόλουθες αρχές προστασίας προσωπικών δεδομένων για να σας παρέ
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>翻译：ReactiveCocoa for a better world</title>
    <link href="https://www.cocoathinking.com/2019/03/02/%E7%BF%BB%E8%AF%91%EF%BC%9AReactiveCocoa-for-a-better-world/"/>
    <id>https://www.cocoathinking.com/2019/03/02/翻译：ReactiveCocoa-for-a-better-world/</id>
    <published>2019-03-02T07:43:06.000Z</published>
    <updated>2019-03-02T07:49:38.571Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ReactiveCocoa创造更美好的世界</strong><br><strong>原文：<a href="https://github.blog/2012-05-04-reactivecocoa-for-a-better-world/#async" target="_blank" rel="noopener">ReactiveCocoa for a better world</a></strong></p><blockquote><p>首先说一下为什么要翻译这篇2012年的文章。ReactiveCocoa for a better world是由<a href="https://github.blog/author/joshaber/" target="_blank" rel="noopener">Josh Abernathy</a>在2012年发表，那个时间刚好是ReactiveCocoa开源的时间，而作者<a href="https://github.blog/author/joshaber/" target="_blank" rel="noopener">Josh Abernathy</a>正是这一开源框架的主要作者，在这篇文章中Josh Abernathy从多个角度为我们介绍了为什么要使用ReactiveCocoa以及ReactiveCocoa能为我们做什么，在这篇文章中你可能会看到一些其他介绍ReactiveCocoa文章的影子，或者更应该说是在一些其他的关于ReactiveCocoa文章中看到ReactiveCocoa for a better world的影子。因为它的影响太深了，在时隔多年重新看到它后我有了把它翻译成中文的想法。</p></blockquote><p>原生App花费了大量的时间来等待和响应，我们等待用户在UI界面上做一些操作，等待网络请求返回响应，等待异步操作的完成，等待一些依赖数据发生改变，然后做出响应。</p><p>但是所有的这些事情-所有的这些等待和响应-通常都会有许多不同的处理方式，这让我们在使用统一的方法来推断他们，chain them，或者是完成它们来变得非常困难。其实，我们可以通过高级方法来做的更好。</p><p>这就为什么我们开源这个神奇的魔法：<a href="https://desktop.github.com/" target="_blank" rel="noopener"> GitHub for Mac: </a> :<a href="https://github.com/ReactiveCocoa/ReactiveCocoaRAC" target="_blank" rel="noopener">ReactiveCocoa</a></p><p>RAC是一个<strong>组合和转换序列值得框架。</strong></p><h2 id="认真讲，他是什么？"><a href="#认真讲，他是什么？" class="headerlink" title="认真讲，他是什么？"></a>认真讲，他是什么？</h2><hr><p>让我们来看一些干货，RAC给我们带来了很多非常酷的东西：</p><ol><li>组合操作一些未来数据的能力</li><li>最小化的使用状态量和可变数据的能力</li><li>用一种方式定义行为和属性之间的联系</li><li>一个统一的，更高级的异步操作接口</li><li>在KVO之上封装的友好的API</li></ol><p>这些功能看起来可能像是随机的，直到你了解到RAC可以处理这些包含了将要等待的一些新值和响应的所有事件。</p><p>最美妙的地方在于RAC是那个能够适应许多不同的，常见的场景。<br>说了这么多，让我们来看看RAC实际上的样子</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><hr><p>RAC可以将遵循了<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/Articles/KVOCompliance.html" target="_blank" rel="noopener">KVO-compliant</a>属性利用<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html" target="_blank" rel="noopener">KVO(key-value observing)</a>l来带来序列的值.举个例子，我们可以看到username属性的变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[RACAble(self.username) subscribeNext:^(NSString *newName) &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, newName);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>That’s cool,但是如果只有这些，那它只是一个比KOV更友好的API，RAC最酷的地方在于我们可以组合序列来一表示一些复杂的行为。<br>假设我们想要检查用户输入的一个特殊用户名，当用用户输入前三个值之内的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[[RACAble(self.username)</span><br><span class="line">distinctUntilChanged]</span><br><span class="line">take:3]</span><br><span class="line">filter:^(NSString *newUsername) &#123;</span><br><span class="line">return [newUsername isEqualToString:@&quot;joshaber&quot;];</span><br><span class="line">&#125;]</span><br><span class="line">subscribeNext:^(id _) &#123;</span><br><span class="line">NSLog(@&quot;Hi me!&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>我们发现username发生了变化，使用filter过滤发生的变化，使用take取前三个发生变化的值，如果新值是joshaber,我们就打印一个“hi mi</p><h3 id="所以呢？"><a href="#所以呢？" class="headerlink" title="所以呢？"></a>所以呢？</h3><hr><p>考虑一下，如果我们不使用RAC来完成这个操作，我们将不得不：</p><ul><li>为username添加上KVO进行监听</li><li>添加一个属性来记住我们通过KVO监听到的发生变化的最后一个值</li><li>添加一个属性来记录我们接收到了多少个发生了变化的值</li><li>任何时间获取到发生变化的值得时候都要添加属性</li><li>对数据进行比较</li></ul><h3 id="还有其他的么？"><a href="#还有其他的么？" class="headerlink" title="还有其他的么？"></a>还有其他的么？</h3><p>我们可以组合序列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[RACSignal</span><br><span class="line">combineLatest:@[ RACAble(self.password), RACAble(self.passwordConfirmation) ]</span><br><span class="line">reduce:^(NSString *currentPassword, NSString *currentConfirmPassword) &#123;</span><br><span class="line">return [NSNumber numberWithBool:[currentConfirmPassword isEqualToString:currentPassword]];</span><br><span class="line">&#125;]</span><br><span class="line">subscribeNext:^(NSNumber *passwordsMatch) &#123;</span><br><span class="line">self.createEnabled = [passwordsMatch boolValue];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>当任何时间password和passwordConfirmation发生变化的时候，我们组合这两个属性最后的值，然后判断这两个值是否符合我们的要求，最后返回一个BOOL。我们就可以通过这个BOOL结果来设置button是否可以点击</p><h3 id="Bindings"><a href="#Bindings" class="headerlink" title="Bindings"></a>Bindings</h3><p>We can adapt RAC to give us powerful bindings with conditions and transformations:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RAC(self, help) = [[RACObserve(self.helpLabel, text) filter:^(NSString *newHelp)&#123;</span><br><span class="line">return newHelp != nil;</span><br><span class="line">&#125;] map:^(NSString *newHelp)&#123;</span><br><span class="line">return [newHelp uppercaseString];</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>绑定help label的值得到属性help上，当流出的新值不是nil，就将这个新值转换成小写。（因为用户总喜欢being YELLED AT）、</p><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><p>RAC同样非常适合做异步操作</p><p>举个例子，我们通过调用一个block来完成多次并发操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[RACSignal</span><br><span class="line">merge:@[ [client fetchUserRepos], [client fetchOrgRepos] ]]</span><br><span class="line">subscribeCompleted:^&#123;</span><br><span class="line">NSLog(@&quot;They&apos;re both done!&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>或是链式调用异步操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[[[client</span><br><span class="line">loginUser]</span><br><span class="line">flattenMap:^(id _) &#123;</span><br><span class="line">return [client loadCachedMessages];</span><br><span class="line">&#125;]</span><br><span class="line">flattenMap:^(id _) &#123;</span><br><span class="line">return [client fetchMessages];</span><br><span class="line">&#125;]</span><br><span class="line">subscribeCompleted:^&#123;</span><br><span class="line">NSLog(@&quot;Fetched all messages.&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>用户登录后，首先加载缓存的消息，然后获取远程的消息，然后打印“Fetched all messages”</p><p>我们也可以方便的讲执行的操作移动到background queue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[[[[client</span><br><span class="line">fetchUserWithUsername:@&quot;joshaber&quot;]</span><br><span class="line">deliverOn:[RACScheduler scheduler]]</span><br><span class="line">map:^(User *user) &#123;</span><br><span class="line">// this is on a background queue</span><br><span class="line">return [[NSImage alloc] initWithContentsOfURL:user.avatarURL];</span><br><span class="line">&#125;]</span><br><span class="line">deliverOn:RACScheduler.mainThreadScheduler]</span><br><span class="line">subscribeNext:^(NSImage *image) &#123;</span><br><span class="line">// now we&apos;re back on the main queue</span><br><span class="line">self.imageView.image = image;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>或者可以更简单的处理潜在的竞争条件，比如，我们可以使用异步操作中通过结果来更新属性，但是除非这个属性在异步操作完成前没有发生变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[[self</span><br><span class="line">loadDefaultMessageInBackground]</span><br><span class="line">takeUntil:RACAble(self.message)]</span><br><span class="line">toProperty:@keypath(self.message) onObject:self];</span><br></pre></td></tr></table></figure></p><h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>RAC从根本上来看是非常简单的，它是以信号的方式来流转数据。<a href="https://cvaieee.org/html/humor/programming_history.html" target="_blank" rel="noopener">Until you reach turtles.</a></p><p>Subscribers来订阅signals，Signals为它的订阅者发送 ’next’, ‘error’, ‘completed’事件，如果所有的事情都是signals来发送时间，那么关键的问题就编程了：这些事件会在什么时候被发送？</p><h3 id="Creating-Signals"><a href="#Creating-Signals" class="headerlink" title="Creating Signals"></a>Creating Signals</h3><p>信号根据合适发送时间来定义自己的行为，我们可以通过+[RACSignal createSignal:]来创建自己的signal：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *helloWorld = [RACSignal createSignal:^(id&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">[subscriber sendNext:@&quot;Hello, &quot;];</span><br><span class="line">[subscriber sendNext:@&quot;world!&quot;];</span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line">return nil;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>当这个signal获取一个新的订阅者，+[RACSignal createSignal:]会通过这个block进行回调。这个新的订阅者是通过里边的block我们可以发送这个事件。在上边的例子中，我们创建了一个signal会发送一个“hello”和“world”,然后发送完成。</p><h2 id="嵌套signal"><a href="#嵌套signal" class="headerlink" title="嵌套signal"></a>嵌套signal</h2><p>我们可以基于helloWorld signal来创建另一个signal：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *joiner = [RACSignal createSignal:^(id&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">NSMutableArray *strings = [NSMutableArray array];</span><br><span class="line">return [helloWorld subscribeNext:^(NSString *x) &#123;</span><br><span class="line">[strings addObject:x];</span><br><span class="line">&#125; error:^(NSError *error) &#123;</span><br><span class="line">[subscriber sendError:error];</span><br><span class="line">&#125; completed:^&#123;</span><br><span class="line">[subscriber sendNext:[strings componentsJoinedByString:@&quot;&quot;]];</span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line">&#125;];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>现在我们有了一个joiner signal,当有订阅者订阅了joiner，它会定义我们的helloworld signal.</p><p>它从helloworld和helloword完成时候增加了所有数据的接收，它将所有接收到的string连接在一起，然后发送他们和完成</p><p>在这种方式，我们可以创建signal来表达一些复杂的行为。</p><p>RAC实现了一套<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/ead2c74fa619b30d161da36af9941af2ae123c5b/ReactiveCocoa/RACSignal%2BOperations.h" target="_blank" rel="noopener">operations</a>来恰好的实现他们，他们通过使用一些默认的行为来获取一些source signal 和返回一个新的signal</p><h2 id="More-info"><a href="#More-info" class="headerlink" title="More info"></a>More info</h2><p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="noopener">ReactiveCocoa</a>可以用于MAC和iOS开发，可以查看<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/README.md" target="_blank" rel="noopener">README</a>来获取更多的信息，然后来导出MAC demo project 来获得一些实际的例子</p><p>对于.NET 开发者，所有这些听起来会很熟悉， ReactiveCocoa实际上是一个Objective-c版本的.NET  <a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh242985(v=vs.103" target="_blank" rel="noopener">Reactive Extensions</a>)(Rx).</p><p>大多数的Rx规则应用于RAC上是非常合适的，这里是一些非常好的Rx资源：</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/reactive-extensions/hh242985(v=vs.103" target="_blank" rel="noopener">Reactive Extensions MSDN entry</a>)</li><li><a href="">Reactive Extensions for .NET Introduction</a></li><li><a href="https://channel9.msdn.com/tags/Rx/" target="_blank" rel="noopener">Rx – Channel 9 videos</a></li><li><a href="http://rxwiki.wikidot.com/" target="_blank" rel="noopener">Reactive Extensions wiki</a></li><li><a href="http://rxwiki.wikidot.com/101samples" target="_blank" rel="noopener">101 Rx Samples</a></li><li><a href="https://www.amazon.com/Programming-Reactive-Extensions-Jesse-Liberty/dp/1430237473" target="_blank" rel="noopener">Programming Reactive Extensions and LINQ</a> (Co-authored by our own <a href="https://github.com/paulcbetts" target="_blank" rel="noopener">Paul Betts</a>!)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;ReactiveCocoa创造更美好的世界&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;原文：&lt;a href=&quot;https://github.blog/2012-05-04-reactivecocoa-for-a-better-world/#async&quot; tar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fastlane</title>
    <link href="https://www.cocoathinking.com/2019/02/25/fastlane/"/>
    <id>https://www.cocoathinking.com/2019/02/25/fastlane/</id>
    <published>2019-02-25T06:40:53.000Z</published>
    <updated>2019-02-25T06:41:47.735Z</updated>
    
    <content type="html"><![CDATA[<p>##使用背景<br>早些时候我一直使用python执行脚本来完成项目的持续集成，在Apple发布Xcode9的时候脚本进行了更新，部分脚本被废弃，在那时候我转移到fastlane阵营，原因很简单，fastlane使用更简单，更方便，我不再需要因为苹果对脚本的更新来被迫修改我的方案。</p><p>##fastlane介绍<br><a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">fastlane</a>是一款持续集成工具，它的功能强大，使用简单，可以帮助我们处理一些费时的工作，比如生成截屏、处理配置文件、编译App、上传测试分发平台等。</p><blockquote><p>fastlane is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.</p></blockquote><p>###开始使用fastlance</p><p>####安装fastlance<br>安装Xcode command line tool的最新版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select —install</span><br></pre></td></tr></table></figure></p><p>使用工具安装fastlance<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#使用gem安装（确保你已经安装了ruby）</span><br><span class="line">sudo gem install fastlane -NV</span><br><span class="line"></span><br><span class="line">#或者使用Homebrew安装（确保已经安装了Homebrew）</span><br><span class="line">brew cask install fastlane</span><br></pre></td></tr></table></figure></p><p>####配置fastlane<br>在terminal中进入你的项目目录，执行以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure></p><p>接下来会根据你在安装时候的不同选择来创建不同的文件</p><ol><li>screenshots</li><li>TestFlight</li><li>AppStore</li><li>Manual<br>这里选择4.Manual就好了，其他的功能后续也可以在配置文件中手动添加<br>其中最需要注意的文件是fastlane/Fastfile，其中包含了你将要操作的所有信息</li></ol><p>####接下来要怎么做？<br>fastlane创建了所有的必要文件给我们，现在你可以通过配置这些文件进行持续化集成</p><p>###使用fastlane部署测试项目</p><p>####编译<br>fastlane 使用一个叫build_app的action来编译app，只要在Fastfile中加入下边代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lane :beta do</span><br><span class="line">build_app(scheme: &quot;MyApp&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>还可以在编译的时候加入其他的选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ane :beta do</span><br><span class="line">build_app(scheme: &quot;MyApp&quot;,</span><br><span class="line">workspace: &quot;Example.xcworkspace&quot;,</span><br><span class="line">include_bitcode: true)</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>####上传app<br>在编译完成后可以上传到你选择的分发测试平台，在fastlane你可以很简单的做到这个工作，甚至不需要做额外的工作就可以同时上传多个平台<br>你可以选择上传的TestFlight，蒲公英，Fir，我们这里以蒲公英来举例：<br><a href="https://www.pgyer.com/doc/view/fastlane" target="_blank" rel="noopener">在这里</a>你可以找到蒲公英的上传文档，<br>你需要执行以下代码安装蒲公英插件<br>···<br>fastlane add_plugin pgyer<br>修改Fastfile，在build_app后添加蒲公英代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lane :beta do</span><br><span class="line">build_app(export_method: &quot;ad-hoc&quot;)</span><br><span class="line">pgyer(api_key: &quot;7f15xxxxxxxxxxxxxxxxxx141&quot;, user_key: &quot;4a5bcxxxxxxxxxxxxxxx3a9e&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>做完这些配置后，你就可以通过fastlane来打包App，并自动上传到蒲公英，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastlane beta，</span><br></pre></td></tr></table></figure></p><p>你可以打开<a href="https://www.pgyer.com/doc/view/fastlane" target="_blank" rel="noopener">蒲公英</a>，查看蒲公英提供的更多配置，比如添加密码，添加更新描述等。</p><p>接下来我会提供一个我正在用的Fastfile为大家提供参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">default_platform(:ios)</span><br><span class="line"></span><br><span class="line">platform :ios do</span><br><span class="line"></span><br><span class="line">lane :test do</span><br><span class="line">#添加版本更新描述</span><br><span class="line">puts &quot;请输入版本描述：&quot;</span><br><span class="line">#获取输入的描述</span><br><span class="line">desc = STDIN.gets</span><br><span class="line">#依次配置workspagce，scheme，build configuration，和export_method</span><br><span class="line">build_app(workspace: &quot;ProjectsName.xcworkspace&quot;, scheme: &quot;ProjectsName&quot;, configuration: &quot;Debug&quot;,export_method: &quot;development&quot;)</span><br><span class="line">#配置蒲公英的api_key,user_key,和输入的版本更新描述</span><br><span class="line">pgyer(api_key: &quot;59aa772ac06fe663xxxxxxxxxxxxxxx&quot;, user_key: &quot;0b18ced68eb3cc7xxxxxxxxxxxxxxxxxx&quot;, update_description: &quot;#&#123;desc&#125;&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>###总结<br>App的编译、打包、上传无趣又费时，使用fastlane可以提升效率，又可以节省我们的时间，不需要为了后续的操作一直盯着电脑。fastlane使用比较方便，这里我只是做一个简单的介绍，当然fastlane还提供了更多的功能，你可以在<a href="https://docs.fastlane.tools/" target="_blank" rel="noopener">fastlane主页</a>和<a href="https://github.com/fastlane/fastlane" target="_blank" rel="noopener">fastlane github</a>中找到更多的详细配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##使用背景&lt;br&gt;早些时候我一直使用python执行脚本来完成项目的持续集成，在Apple发布Xcode9的时候脚本进行了更新，部分脚本被废弃，在那时候我转移到fastlane阵营，原因很简单，fastlane使用更简单，更方便，我不再需要因为苹果对脚本的更新来被迫修改我
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reactivecocoa全解析 2.常用操作和高阶函数</title>
    <link href="https://www.cocoathinking.com/2019/02/18/2-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://www.cocoathinking.com/2019/02/18/2-常用操作和高阶函数/</id>
    <published>2019-02-18T07:13:48.000Z</published>
    <updated>2019-02-19T08:42:31.151Z</updated>
    
    <content type="html"><![CDATA[<p>RAC现在分了两部分，ReactiveCocoaObjc和ReactiveCocoaSwift,本文介绍的均是 ReactiveCocoaObjc 2.5.0 版本的内容.</p><p>RAC的核心是信号源（RACStream），在RAC中，信号源代表随着时间而改变的流值，订阅者通过订阅信号来获取这些值，RACStream是一个抽象类，我们用到的最多的是它的之类 RACSignal和RACSequence，<br><em>以下代码和示例使用的ReactiveCocoa 2.5版本</em></p><a id="more"></a><p>介绍RAC的操作之前先介绍以下链式操作</p><p>链式操作：</p><p>用过Masonry的同学应该对链式操作不陌生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[self.label mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line"></span><br><span class="line">make.top.left.mas_equalTo(0);</span><br><span class="line"></span><br><span class="line">make.centerY.mas_equalTo(self.view);</span><br><span class="line"></span><br><span class="line">make.width.height.mas_greaterThanOrEqualTo(0);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>这里的make.top.left.mas_equalTo(0); 就是一个链式操作，执行一个方法后的返回结果接着执行下一个方法，前边我们已经讲到RAC使用的是FPR编程思想，所以在RAC中你同样可以使用链式操作</p><p>我们修改一下上边的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[[RACObserve(self, username)</span><br><span class="line"></span><br><span class="line">filter:^(NSString *newName) &#123;</span><br><span class="line"></span><br><span class="line">return [newName hasPrefix:@&quot;j&quot;];</span><br><span class="line"></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line">subscribeNext:^(NSString *newName) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;, newName);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p>订阅：subscribeNext</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// When self.username changes, logs the new name to the console.</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// RACObserve(self, username) creates a new RACSignal that sends the current</span><br><span class="line"></span><br><span class="line">// value of self.username, then the new value whenever it changes.</span><br><span class="line"></span><br><span class="line">// -subscribeNext: will execute the block whenever the signal sends a value.</span><br><span class="line"></span><br><span class="line">[RACObserve(self, username) subscribeNext:^(NSString *newName) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;, newName);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>当username内容发生变化，就会打印出一个新的值。</p><p>RACObserve(TARGET, KEYPATH) 是RAC提供的一个宏，他可以创建一个新的signal，这里，我们通过subscribeNext方法对 signal进行订阅，当username内容发生变化时，就会在block中获取username的新值并进行打印</p><p>bind 对信号进行绑定，返回一个新的信号，它会订阅原信号的值，在bindingBlock中对原信号的值进行转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *orignSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@1];</span><br><span class="line"></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">return [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;orign signal dispose&quot;);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">RACSignal *newSignal = [orignSignal bind:^RACStreamBindBlock&#123;</span><br><span class="line"></span><br><span class="line">return ^(NSNumber *value, BOOL *stop)&#123;</span><br><span class="line"></span><br><span class="line">return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@(value.integerValue * 2)];</span><br><span class="line"></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">return [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;bind dispose&quot;);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[newSignal subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;newSignal value = %@&quot;, x);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>map:要完成对orign signal值得转换，使用map 和flattenMap是更简单的选择，这两个方法其实也是对bind方法的封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *orignSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@1];</span><br><span class="line"></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">return [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;orign signal dispose&quot;);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[[orignSignal map:^id(NSNumber *value) &#123;</span><br><span class="line"></span><br><span class="line">return @(value.integerValue * 2);</span><br><span class="line"></span><br><span class="line">&#125;]subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;new value is %@&quot;, x);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>flattenMap 返回的是一个新的signal</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *newSignal2 = [orignSignal flattenMap:^RACStream *(NSNumber * value) &#123;</span><br><span class="line"></span><br><span class="line">return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@(value.integerValue * 2)];</span><br><span class="line"></span><br><span class="line">return nil;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[newSignal2 subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;new value2 is %@&quot;, x);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>filter:对seguence遍历后进行过滤，将不符合条件的数据进行过滤掉，返回一个新的sequence</p><p>nameArray.rac_sequence是将array转换为sequence，sequence代表了一个不可变的序列，它可以被订阅者订阅，而且还可以跟signal很方便的进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NSArray *nameArray = @[@&quot;tom&quot;, @&quot;jerry&quot;, @&quot;tomas&quot;, @&quot;link&quot;];</span><br><span class="line"></span><br><span class="line">NSArray *resultArray = [nameArray.rac_sequence filter:^BOOL(NSString *name) &#123;</span><br><span class="line"></span><br><span class="line">return name.length &gt; 3;</span><br><span class="line"></span><br><span class="line">&#125;].array;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@&quot;, resultArray);</span><br></pre></td></tr></table></figure><p>combineLatest 使用一个signal数组，当数组中的任意一个signal值发生变化时，就在block中对所有signal最后一个值进行处理，最后返回一个新的signal。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.validLoginSignal = [[RACSignal combineLatest:@[RACObserve(self, username), RACObserve(self, password)] reduce:^(NSString *username, NSString *password)&#123;</span><br><span class="line"></span><br><span class="line">return @(username.isExist &amp;&amp; password.isExist);</span><br><span class="line"></span><br><span class="line">&#125;] distinctUntilChanged];</span><br></pre></td></tr></table></figure><p>zip 对多个信号的值进行压缩后创建一个RACTuples， zip将对每一个signal的值以配对的形式进行合并，比如signalA发送1和3，signal发送了2，那么合并后的Tuples包含了signal的1和signal的2。这里是zip和combineLatest最大的区别，在这里使用combineLatest会得到3和2，因为会重复利用signalB的旧值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@1];</span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@3];</span><br><span class="line"></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">return nil;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; </span><br><span class="line"></span><br><span class="line">[subscriber sendNext:@2];</span><br><span class="line"></span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">return nil;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[[RACSignal zip:@[signalA, signalB]] subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;zip %@&quot;, x); //==&gt;1，2</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[[RACSignal combineLatest:@[signalA, signalB]] subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;combineLatest: %@&quot;, x); //==&gt;3，2</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>merge</p><p>对多个signal进行合并，会监听到任意一个signal值得变化，并返回这个signal最新的值，当所有的signal发送complete时候会发送complate，当任意一个signal发送error立刻就发送error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[RACSignal merge:@[signalA, signalB]] subscribeNext:^(id x) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;x = %@&quot;, x);</span><br><span class="line"></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RAC现在分了两部分，ReactiveCocoaObjc和ReactiveCocoaSwift,本文介绍的均是 ReactiveCocoaObjc 2.5.0 版本的内容.&lt;/p&gt;
&lt;p&gt;RAC的核心是信号源（RACStream），在RAC中，信号源代表随着时间而改变的流值，订阅者通过订阅信号来获取这些值，RACStream是一个抽象类，我们用到的最多的是它的之类 RACSignal和RACSequence，&lt;br&gt;&lt;em&gt;以下代码和示例使用的ReactiveCocoa 2.5版本&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reactivecocoa全解析 1.FRP编程思想</title>
    <link href="https://www.cocoathinking.com/2019/02/18/1-FRP%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <id>https://www.cocoathinking.com/2019/02/18/1-FRP编程思想/</id>
    <published>2019-02-18T07:09:30.000Z</published>
    <updated>2019-02-19T08:42:18.942Z</updated>
    
    <content type="html"><![CDATA[<p>ReactiveCocoa全解析 1.FRP编程思想</p><p>ReactiveCocoa是我在开发工作中重度使用的一个开源框架，当你使用MVVM设计模式的时候，它几乎是你最好的选择，当然你也可以使用其他的一些方式来完成数据绑定，KVO，delegate或者是block，但是RAC为你提供了更优雅更安全的绑定方式，我们可以使用RAC在View和ViewModel中充当binder的角色来实现数据的同步，也可以把RAC放在ViewModel层，使用signal来异步获取数据，比如网络请求，访问数据库等。 </p><p>因为RAC是一个使用起来并不那么容易的开源框架，所以接下来我会分几个部分来介绍它： </p><ol><li>FRP 的思想概要  （oop和fp）</li><li>RAC 的 operations 介绍</li><li>冷信号与热信号解惑</li><li>生命周期指南</li><li>disposable 和多线程</li><li>实战分享<a id="more"></a></li></ol><p>ReactiveCocoa是Gitbub开源的一个函数响应式编程框架，它是iOS上的函数响应式编程（FRP）体现，要理解RAC，首先我们就要理解函数响应式编程（FRP），刚开始接触FRP可能有一些困扰，因为它和我们以往的编程方式区别很大，接下来我们回顾一下现在常用的编程方式：面向对象编程（OOP）和面向协议编程（POP）</p><p>###面向对象编程（OOP<br>从我们刚开始学习编程，接触到的最多就是面向对象编程（OOP），OOP的优点很多，继承，抽象，多态，可重用性，可维护性等等，我们从很早就知道了万物皆可盘（误 ，应该是万物皆对象的编程思想，当然有人也有一些质疑，比如结构体和对象的关系等，抛开这些争论，面向对象仍然是一种灵活的，易于维护的编程方式。</p><p>###面向协议编程（POP）<br>面向协议编程（POP）是我在使用Swift时用到的编程方式。我在15-16年中使用Swift来完成编程工作，现在因为一些原因我又回到了Objective-C阵营，但我仍无比的怀念Swift，其中一个重要原因，就是Swift对面向协议编程的友好支持。</p><blockquote><p>苹果公司声明：从核心上说，Swift是面向协议的</p></blockquote><p>POP拥有OOP的大部分特点，他们之间最大的区别是：类只能继承一个类（这里只讨论iOS开发语言，像一些编程语言比如C++的确拥有多继承，但是多继承在工作中仍然不是一个很好的特性），而类可以实现多个协议。我们可以举一个例子，如果现在要创建漫威英雄的类，我们要怎么创建？</p><p>创建一个父类,拥有fly，land方法， SuperHero：fly（），land()</p><p>子类Super Man：</p><p>子类Iron Man：</p><p>子类Spider Man：</p><p>我们都知道小蜘蛛是没有飞行能力的，所以在这里将fly和land方法放在父类中并不可行，我们必须在父类删除fly和land，在超人和钢铁侠中单独加入fly和land，但是拥有飞行能力的超级英雄并不少见，我们接下来不得不为猎鹰，幻世，绯红女巫他们挨个加上。所以面向对象在这里并不是很可靠，换个思路，这里我们用POP试一下</p><p>创建一个fly协议，拥有fly和land两个方法，因为飞行和降落都是对应的，所以这里没有什么问题，接下来我们只要将拥有飞行能力的超级英雄实现fly协议，这样使用这个fly协议的超级英雄就拥有了飞行能力，当然我们也可以建立更多的协议，来为超级英雄增加更多的能力。</p><p>编程思想并没有孰优孰劣，我们这里只是做一个简单介绍，接下介绍一下今天的重点，函数响应式编程（FRP）。</p><p>###函数响应式编程（FRP）<br>FRP全称Function Reactive Programing，它包含了两个部分，函数式编程 Function  Programing（FP）和响应式编程  Reactive Programing（RP）,</p><p>####响应式编程 </p><p>我们先来看一段代码，</p><p>int a  = 3;</p><p>int b  = 5;</p><p>int c = a + b;</p><p>a = 8;</p><p>NSLog(@“c = %d”, c); //8</p><p>这是我们熟悉的编程方式，首先为a和b进行赋值，然后将a + b的指赋给c，打印c的结果为8，接下来修改a和b的值后重新打印c，此时c的值仍然是8。因为代码中的  a + b只是一个瞬时的操作，并不是一段关系的描述。</p><p>而响应式编程是一种面向数据流和变化传播的编程范式，这意味着可以再编程语言中很方便的表达静态和动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播，所以在响应式编程中，上述例子中的c 会跟根据a、b值得变化而发生变化</p><p>在app的登录界面中，我们常常需要通过判断用户名和密码是否填写合法后来设置登陆按钮的可点击状态，这里我们可以对userNameTextField和passwordTextField进行监听，然后将监听的结果合并后进行合法性判断，最后将处理的结果绑定到登陆按钮上，这在RAC中是一个最常用的写法，当userNameTextField和passwordTextField发生变化时，登陆按钮的状态会相应的发生变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RAC(self.viewModel, username) = self.usernameTexField.rac_textSignal;</span><br><span class="line"></span><br><span class="line">RAC(self.viewModel, password) = self.passwordTextField.rac_textSignal;</span><br><span class="line"></span><br><span class="line">self.validLoginSignal = [[RACSignal combineLatest:@[RACObserve(self, username), </span><br><span class="line"></span><br><span class="line">RACObserve(self, password)] reduce:^(NSString *username, NSString *password)&#123;</span><br><span class="line">return @(username.isExist &amp;&amp; password.isExist);</span><br><span class="line">&#125;] distinctUntilChanged];</span><br><span class="line"></span><br><span class="line">RAC(self.loginButton, enabled) = self.viewModel.validLoginSignal;</span><br></pre></td></tr></table></figure><p>​<br>​<br>​ 另外一个典型的例子，在iOS开发中我们用Autolayout设置约束来描述视图之间的位置关系，当某一个约束发生改变后，其他的约束就会响应发生变化，这里也是响应式编程的体现。<br>​<br>​ ####函数式编程<br>​<br>​ 函数式编程将计算机运算视为函数运算，并且避免使用程序状态和易变对象，在函数式编程中函数可以像其他数据类型一样，处于平等的地位，可以作为参数传递到另一个函数中，可以赋值给其他的变量，也可以做为别的函数的返回值。<br>​<br>​ 我们可以使用RAC提供的一系列高阶函数来实现函数式编程，比如map，falltenMap,,filter,reduce,merge,combinte等等，在接下来的文章中我会介绍一下RAC为我们提供的常用的高阶函数。<br>​<br>​<br>​ 到这里大家应该已经对FRP编程思想有一些认识，接下来我会介绍以下RAC为我们提供的高阶函数，已经如何如果使用它们来解决开发工作中可能遇到的一些问题。<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​ 说了这么多，那么使用FRP到底有什么好处呢，我觉得使用FRP可以为我们解决以下几个问题：<br>​<br>​ 过多的状态值<br>​<br>​ vc中的冗余代码<br>​<br>​ 消息传递机制<br>​<br>​ Event之间的组合，交互<br>​<br>​ 多请求的处理<br>​ </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ReactiveCocoa全解析 1.FRP编程思想&lt;/p&gt;
&lt;p&gt;ReactiveCocoa是我在开发工作中重度使用的一个开源框架，当你使用MVVM设计模式的时候，它几乎是你最好的选择，当然你也可以使用其他的一些方式来完成数据绑定，KVO，delegate或者是block，但是RAC为你提供了更优雅更安全的绑定方式，我们可以使用RAC在View和ViewModel中充当binder的角色来实现数据的同步，也可以把RAC放在ViewModel层，使用signal来异步获取数据，比如网络请求，访问数据库等。 &lt;/p&gt;
&lt;p&gt;因为RAC是一个使用起来并不那么容易的开源框架，所以接下来我会分几个部分来介绍它： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FRP 的思想概要  （oop和fp）&lt;/li&gt;
&lt;li&gt;RAC 的 operations 介绍&lt;/li&gt;
&lt;li&gt;冷信号与热信号解惑&lt;/li&gt;
&lt;li&gt;生命周期指南&lt;/li&gt;
&lt;li&gt;disposable 和多线程&lt;/li&gt;
&lt;li&gt;实战分享
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cocoaThinking重启计划</title>
    <link href="https://www.cocoathinking.com/2019/02/01/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF/"/>
    <id>https://www.cocoathinking.com/2019/02/01/博客重启/</id>
    <published>2019-02-01T08:37:17.000Z</published>
    <updated>2019-02-01T08:43:55.526Z</updated>
    
    <content type="html"><![CDATA[<p>我在2015年开通了自己的博客，博客通过hexo+github搭建，博客开通的虽早，但是写作确没有怎么坚持下来，2015年到现在零零散散的写了不到10篇，多数还是在15年趁着刚刚搭建完的热乎劲写成，实在汗颜。2019阴历新年马上就要到了，我决定制定一个cocoaThinking重启计划，一方面写一写技术总结，另一方面也有地方可以写一下日常的生活点滴。<br>这次博客的重启，我更新了一些必要工具，hexo，node，npm，还有hexo的模板Next，更新的时候我发现node的版本从当时的0.10升级到了11.15，hexo和next也都完成多个版本的升级，不得不感慨时光匆匆，几年的时间过的真快，当时搭建博客的时候和我的同事showndu一起研究讨论问题的场景还是历历在目，这也更坚定了我对这次重启计划的决心。<br>看了一下自己以前写的文章，多数因为年代久远已经过时了，剩下的几篇比如《iOS常用设计模式》，因为当时的自己较为年轻，写的文章也有很多不足。所以会对之前的文章进行清理，过时的删掉，不足的会进行修改补充。接下来先完成这部分工作吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在2015年开通了自己的博客，博客通过hexo+github搭建，博客开通的虽早，但是写作确没有怎么坚持下来，2015年到现在零零散散的写了不到10篇，多数还是在15年趁着刚刚搭建完的热乎劲写成，实在汗颜。2019阴历新年马上就要到了，我决定制定一个cocoaThinki
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS9 Search API NSUserActivity</title>
    <link href="https://www.cocoathinking.com/2015/09/25/NSUserActivity/"/>
    <id>https://www.cocoathinking.com/2015/09/25/NSUserActivity/</id>
    <published>2015-09-25T03:33:47.000Z</published>
    <updated>2015-09-25T03:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在WWDC2015会议上，苹果公布了iOS9系统，iOS9系统相比iOS7、iOS8并没有特别大得变化，可以看做是iOS8的基础上进行的平滑的过度。但是新的系统中仍有一些特性和功能值得人们去关注，其中<br>Search API就是其中之一。通过新的Search API可以实现强大的应用内搜索功能，通过在Spotlight中使用我们设计的所以，来查看app中的界面或是内容。</p><h4 id="iOS9的-Search-API由三个组件组成："><a href="#iOS9的-Search-API由三个组件组成：" class="headerlink" title="iOS9的 Search API由三个组件组成："></a>iOS9的 Search API由三个组件组成：</h4><p>1.NSUserActivity<br>2.Web Markup<br>3.Core Spotlight<br>现在介绍一下NSUserActivity的使用<br>NSUserActivity是在iOS8中出现的API，主要用户HandOff功能，iOS9中NSUserActivity新增加了一个属性 eligibleForSearch 来控制在Spotlight中的显示<br><a id="more"></a></p><p>定义一个NSUserActivity属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong)NSUserActivity *activity;</span><br></pre></td></tr></table></figure></p><p>初始化NSUserActivity,并设置属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//ActivityType为唯一标识</span><br><span class="line">_activity = [[NSUserActivity alloc]initWithActivityType:@&quot;Eden&quot;];</span><br><span class="line"></span><br><span class="line">//title app在Spotlight中显示的名称，可以和app名称不一样，多个app使用相同的keywords，初始通过title名称进行排序</span><br><span class="line">_activity.title = @&quot;Eden&quot;;</span><br><span class="line"></span><br><span class="line">//Spolight搜索关键字</span><br><span class="line">_activity.keywords = [NSSet setWithArray:@[@&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Eve&quot;]];</span><br><span class="line"></span><br><span class="line">//关闭HandOff功能</span><br><span class="line">_activity.eligibleForHandoff = NO;</span><br><span class="line"></span><br><span class="line">//开启Spotlight search功能</span><br><span class="line">_activity.eligibleForSearch = YES;</span><br><span class="line"></span><br><span class="line">//开启NSUserActivity</span><br><span class="line">[_activity becomeCurrent];</span><br></pre></td></tr></table></figure></p><p>当做完这些操作时候然后运行程序，我们在spotlight中搜索 adam, lilith, eva中的某一个关键字就会找到我们的应用，此时选择应用会直接跳转到app的首页。有时候我们希望最好能通过某个关键字直接跳转到app其中某一页，幸运的是NSUserActivity同样支持这个功能。</p><h4 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h4><p>创建AdmaViewController，LilithViewController<br>我们在AdmaViewController中创建adamUserActivity,title为adamView, 关键字adam<br>我们在LilithViewController中创建lilithUserActivity, title为lilithView,关键字lilith<br>可以在首页通过adam跳转到admaViewController<br>可以在首页通过lilith跳转到lilithViewController</p><h4 id="开始工作："><a href="#开始工作：" class="headerlink" title="开始工作："></a>开始工作：</h4><p>找到AppDelegate文件，添加方法</p><p>//在主线程下存在可用NSUserActivity对象时候调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler&#123;</span><br><span class="line"></span><br><span class="line">//找到当前的window的rootView转换为UINavigationController(如果你的rootView是UINavigationController的话)</span><br><span class="line">    UINavigationController *navigationController = (UINavigationController *)self.window.rootViewController;</span><br><span class="line"></span><br><span class="line">//找到navigationController的topView（首页） 中restoreUserActivityState方法</span><br><span class="line">    [navigationController.topViewController restoreUserActivityState:userActivity];</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 在首页中重写restoreUserActivityState方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)restoreUserActivityState:(NSUserActivity *)activity&#123;</span><br><span class="line">//通过Spotlight中传过来的NSUserActivity对象的title判断具体跳转到哪一页</span><br><span class="line">    if ([activity.title isEqualToString:@&quot;Adam&quot;]) &#123;</span><br><span class="line">        AdamViewController *adamView = [[AdamViewController alloc]init];</span><br><span class="line">        [self.navigationController pushViewController:adamView animated:YES];</span><br><span class="line">    &#125;else if([activity.title isEqualToString:@&quot;Lilith&quot;])&#123;</span><br><span class="line">        LilithViewController *lilithView = [[LilithViewController alloc]init];</span><br><span class="line">        [self.navigationController pushViewController:lilithView animated:YES];</span><br><span class="line">    &#125;else  if([activity.title isEqualToString:@&quot;Eve&quot;])&#123;</span><br><span class="line">        EveViewController *eveView = [[EveViewController alloc]init];</span><br><span class="line">        [self.navigationController pushViewController:eveView animated:YES];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在当选择再Spotlight中搜索adam，选择应用会直接跳转到 adamViewController中，搜索lilith关键字，选择应用会直接跳转到lilithViewController中</p><p><a href="https://github.com/Lilin233/iOS9NSUserActivity" target="_blank" rel="noopener">本文代码下载地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在WWDC2015会议上，苹果公布了iOS9系统，iOS9系统相比iOS7、iOS8并没有特别大得变化，可以看做是iOS8的基础上进行的平滑的过度。但是新的系统中仍有一些特性和功能值得人们去关注，其中&lt;br&gt;Search API就是其中之一。通过新的Search API可以实现强大的应用内搜索功能，通过在Spotlight中使用我们设计的所以，来查看app中的界面或是内容。&lt;/p&gt;
&lt;h4 id=&quot;iOS9的-Search-API由三个组件组成：&quot;&gt;&lt;a href=&quot;#iOS9的-Search-API由三个组件组成：&quot; class=&quot;headerlink&quot; title=&quot;iOS9的 Search API由三个组件组成：&quot;&gt;&lt;/a&gt;iOS9的 Search API由三个组件组成：&lt;/h4&gt;&lt;p&gt;1.NSUserActivity&lt;br&gt;2.Web Markup&lt;br&gt;3.Core Spotlight&lt;br&gt;现在介绍一下NSUserActivity的使用&lt;br&gt;NSUserActivity是在iOS8中出现的API，主要用户HandOff功能，iOS9中NSUserActivity新增加了一个属性 eligibleForSearch 来控制在Spotlight中的显示&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://www.cocoathinking.com/categories/iOS/"/>
    
    
      <category term="iOS9" scheme="https://www.cocoathinking.com/tags/iOS9/"/>
    
      <category term="Search API" scheme="https://www.cocoathinking.com/tags/Search-API/"/>
    
      <category term="NSUserActivity" scheme="https://www.cocoathinking.com/tags/NSUserActivity/"/>
    
  </entry>
  
  <entry>
    <title>NSArray和NSMutableArray</title>
    <link href="https://www.cocoathinking.com/2015/08/26/%E6%95%B0%E7%BB%84/"/>
    <id>https://www.cocoathinking.com/2015/08/26/数组/</id>
    <published>2015-08-26T14:09:39.000Z</published>
    <updated>2015-08-26T14:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组作为存储对象的有序集合，可能是平时用到的最多的集合类。NS数组中存放的是Fundation对象，简单类型比如int，float等可以封装为NSNumber对象来存放到数组中。<br>Objc中数组分为不可变数组和可变数组，可变数组使用NSMutableArray来处理，不可变数组为NSArray，NSMutableArray是NSArray的子类，也就是说继承了NSArray得所有方法</p><h3 id="1-创建一个数组"><a href="#1-创建一个数组" class="headerlink" title="1.创建一个数组"></a>1.创建一个数组</h3><p>创建一个NSArray<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = [NSArray arrayWithObjects:@1, @2, @3, nil];</span><br><span class="line"></span><br><span class="line">NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:10];</span><br><span class="line"></span><br><span class="line">NSMutableArray *array2 = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:0];</span><br></pre></td></tr></table></figure></p><blockquote><p>使用initWithCapacity方法可以在初始化数组的时候添加一个预留空间，在数组空间超过这个预留空间时候会进行自动追加。不过是再测试中发现这样做并没有提高应有的效率，传言苹果实际上没有采用这个参数。不过这样有个好处是可以做为一个隐性文档来提高代码可读性。<br><a id="more"></a></p></blockquote><p>在创建NSArray数组的时候也可以使用语法糖，相对于调用方法更加简单快捷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];</span><br></pre></td></tr></table></figure></p><h3 id="2-NSArray-和NSMutableArray-转换"><a href="#2-NSArray-和NSMutableArray-转换" class="headerlink" title="2.NSArray 和NSMutableArray 转换"></a>2.NSArray 和NSMutableArray 转换</h3><p>//NSMutableArray 转换NSArray<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 创建可变数组</span><br><span class="line">NSMutableArray *mutableArray = [NSMutableArray array];</span><br><span class="line">// 使用copy方法获得一个NSArray。使用三木运算符判断当NSArray为nil时候重新初始化一个新的对象</span><br><span class="line">// x?:y == x?x:y;  </span><br><span class="line">NSArray *array = [mutableArray copy]?:[NSArray array];</span><br></pre></td></tr></table></figure></p><p>//NSArray 转换NSMutableArray<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//初始化一个NSArray</span><br><span class="line">NSArray *array = @[@7, @2 ,@0 ,@1, @6, @8, @3] ;</span><br><span class="line">// 使用mutableCopy方法获得一个NSMutableArray</span><br><span class="line">NSMutableArray *mutableArray = [array mutableCopy]?:[NSMutableArray array];</span><br><span class="line">//使用类方法arrayWithArray进行转换</span><br><span class="line">NSMutableArray *mutableArray2 = [NSMutableArray arrayWithArray:array];</span><br></pre></td></tr></table></figure></p><h3 id="3-查找对象"><a href="#3-查找对象" class="headerlink" title="3.查找对象"></a>3.查找对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id object  = [array objectAtIndex:index];</span><br></pre></td></tr></table></figure><p>同样可以通过语法糖获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id object = array[index];</span><br></pre></td></tr></table></figure></p><p>NSArray提供firstObject, lastObject,方法获取数组的首尾对象，当数组为空时候返回nil。而使用常规方法获取空数组中的对象则会返回NSRangeException异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id lastObject  = [array lastObject];</span><br><span class="line">id firstObject = [array firstObject];</span><br></pre></td></tr></table></figure></p><p>为了方便数组中数据量很大的情况下查找数据，苹果已经预先实现二分查找法来遍历数组，这样查询效率将大大提高<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];</span><br><span class="line">NSMutableArray *mutableArray = [NSMutableArray array];</span><br><span class="line">NSRange range = NSMakeRange(0, 5);</span><br><span class="line">NSInteger index = [array indexOfObject:@0 inSortedRange:range options:NSBinarySearchingInsertionIndex usingComparator:^NSComparisonResult(id obj1, id obj2) &#123;</span><br><span class="line">    if (obj1 &lt; obj2) &#123;</span><br><span class="line">        return NSOrderedAscending;</span><br><span class="line">    &#125;</span><br><span class="line">        return NSOrderedDescending;</span><br><span class="line">&#125;];</span><br><span class="line">id object = mutableArray[index];</span><br></pre></td></tr></table></figure></p><h3 id="4-排序"><a href="#4-排序" class="headerlink" title="4.排序"></a>4.排序</h3><p>有很多方法可以对数组进行排序，如果数组中存放的是字符串对象，可以使用sortedArrayUsingSelector:方法进行排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;];</span><br><span class="line">NSArray *newArray = [array sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)];</span><br></pre></td></tr></table></figure></p><p>如果数组存放的是数字，可以使用compare:方法进行排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@4, @0, @8, @9, @11];</span><br><span class="line">NSArray *newArray = [array sortedArrayUsingSelector:@selector(compare:)];</span><br></pre></td></tr></table></figure></p><p>可是使用reverseObjectEnumerator.allObjects获得一个数组的逆序排列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@4, @0, @8, @9, @11];</span><br><span class="line">NSArray *newArray = array.reverseObjectEnumerator.allObjects;</span><br></pre></td></tr></table></figure></p><h3 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5.枚举"></a>5.枚举</h3><p>从一个数组过滤一些元素，组成另一个数组使我们经常遇到的一个场景，同样Objc提供了很多方法可以实现<br>1.快速枚举 NSFastEnumeration(for in)<br>使用快速枚举在数组数据量较大的情况下效率会比传统的for循环提高很多，而且快速枚举代码的可读性也更高<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];</span><br><span class="line">NSMutableArray *newArray = [NSMutableArray array];</span><br><span class="line">for (NSString *godName in array) &#123;</span><br><span class="line">    if ([godName containsString:@&quot;l&quot;]) &#123;                        [newArray addObject:godName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">NSLog(@&quot;%@&quot;,newArray);</span><br></pre></td></tr></table></figure></p><p>2.使用indexesOfObjectsWithOptions方法<br>当数据量很大的情况下，使用indexesOfObjectsWithOptions方法的NSEnumerationConcurrent参数可以开启同步执行，但这也只是在数据量很大的情况下，当数据量较少时候因为需要额外的线程管理效率会变得更低一些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];</span><br><span class="line">NSIndexSet *indexSet = [array indexesOfObjectsWithOptions:NSEnumerationConcurrent passingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop) &#123;</span><br><span class="line">    if ([obj isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        NSString *godName = obj;</span><br><span class="line">        if ([godName containsString:@&quot;l&quot;]) &#123;</span><br><span class="line">                    return obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            return nil;</span><br><span class="line">    &#125;];</span><br><span class="line">NSArray *newArray = [array objectsAtIndexes:indexSet];</span><br><span class="line">NSLog(@&quot;%@&quot;,newArray);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组作为存储对象的有序集合，可能是平时用到的最多的集合类。NS数组中存放的是Fundation对象，简单类型比如int，float等可以封装为NSNumber对象来存放到数组中。&lt;br&gt;Objc中数组分为不可变数组和可变数组，可变数组使用NSMutableArray来处理，不可变数组为NSArray，NSMutableArray是NSArray的子类，也就是说继承了NSArray得所有方法&lt;/p&gt;
&lt;h3 id=&quot;1-创建一个数组&quot;&gt;&lt;a href=&quot;#1-创建一个数组&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个数组&quot;&gt;&lt;/a&gt;1.创建一个数组&lt;/h3&gt;&lt;p&gt;创建一个NSArray&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSArray *array = [NSArray arrayWithObjects:@1, @2, @3, nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:10];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *array2 = [NSMutableArray array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:0];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用initWithCapacity方法可以在初始化数组的时候添加一个预留空间，在数组空间超过这个预留空间时候会进行自动追加。不过是再测试中发现这样做并没有提高应有的效率，传言苹果实际上没有采用这个参数。不过这样有个好处是可以做为一个隐性文档来提高代码可读性。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS常用设计模式</title>
    <link href="https://www.cocoathinking.com/2015/08/12/iOS%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://www.cocoathinking.com/2015/08/12/iOS常用设计模式/</id>
    <published>2015-08-12T09:04:17.000Z</published>
    <updated>2015-08-12T09:36:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>所有的iPhone应用程序都是基于UIKit框架构建而成的，所以它们在本质上具有相同的核心架构。</p><blockquote><p>UIKit框架的设计模式 结合了很多在Mac OS X Cocoa应用程序中使用的设计模式，理解这些设计模式对于创建iPhone程序是很关键的。</p></blockquote><h3 id="1-模型-视图-控制器模式-MVC模式"><a href="#1-模型-视图-控制器模式-MVC模式" class="headerlink" title="1.模型-视图-控制器模式 MVC模式"></a>1.模型-视图-控制器模式 MVC模式</h3><p>模型-视图-控制器模式(model-view-controller)简称MVC模式，它将您的代码独立分割为几个部分。模型部分定义应用程序的数据引擎，负责维护数据的完整性；视图定义应用程序的用户界面；控制器则充当模型和视图的桥梁，负责实现数据和现实的更新。<br><a id="more"></a></p><h3 id="2-目标-动作"><a href="#2-目标-动作" class="headerlink" title="2.目标-动作"></a>2.目标-动作</h3><p>控件通过目标-动作的模式将用户的交互通知您的应用程序，当用户以预先定义好的动作（比如点击一个按钮）进行交互时，空间就会将消息（动作）发送给您制定的对象（目标）。接收到动作消息后，目标对象就会以恰当的方式相应（比如按动按钮的时候刷新应用程序的状态）。</p><h3 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h3><p>单例模式确保一个给定类只有一个实例出现，这个实例有一个全局的访问点，它通常使用懒加载的时候在第一次使用的时候再取加载<br>注意：苹果使用了大量的单例模式，我们用到的[UIAppliacation shareapplication],[UIScreen mainscreen],[NSUserDefaults standardUserDefaults] 等返回的都是一个单例对象。<br>在一些情况下使用单例模式会是非常合理的，比如你需要一个全局配置处理类，使用单例模式就会很好的实现。<br>使用GCD的方式可以很容易实现一个单例模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+(Singelton)shareInstance&#123;</span><br><span class="line"> // 1</span><br><span class="line"> static Singelton *st;</span><br><span class="line"> // 2</span><br><span class="line"> static dispatch_once_t onceToken;</span><br><span class="line"> // 3</span><br><span class="line"> dispatch_once(&amp;onceToken,^&#123;</span><br><span class="line"> st =[[Singelton alloc]init];</span><br><span class="line"> &#125;);</span><br><span class="line"> return st;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中有三个需要注意的地方：</p><ol><li>声明一个static静态变量保存实例变量，确保它在类中的全局可用性。</li><li>声明一个static静态dispath_once_t，确保初始化代码只执行一次</li><li>使用 Grand Center Dispatch (GCD)执行Singelton变量block，正式单例模式的关键，一旦类被初始化，初始化器就不会再被调用<br>下次再调用shareInstance的时候，dispatch_once块中得代码将不会执行（因为他已经被执行了一次），你将得到已经初始化好的类</li></ol><h3 id="4-代理设计模式"><a href="#4-代理设计模式" class="headerlink" title="4.代理设计模式"></a>4.代理设计模式</h3><p>代理设计模式  一个对象提供机会对另一个对象发生变化时候做出反应。<br>代理模式基本思想：两个对象协同解决问题，通常用于对象之间的通信</p><p>Cocoa 框架中同样运用了大量的代理模式，每个UI控件后边都声明了一个id类型的delegate或是datasource，比如说最常用到的UITableView 控件头文件中声明了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@property (notamatic, assign)id &lt;UITableViewDataSource&gt; datasource;  </span><br><span class="line">@property (notamatic, assign)id &lt;UITableViewDelegate&gt; delegate;</span><br></pre></td></tr></table></figure></p><p>即这个代理要遵循某一个协议。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有的iPhone应用程序都是基于UIKit框架构建而成的，所以它们在本质上具有相同的核心架构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;UIKit框架的设计模式 结合了很多在Mac OS X Cocoa应用程序中使用的设计模式，理解这些设计模式对于创建iPhone程序是很关键的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-模型-视图-控制器模式-MVC模式&quot;&gt;&lt;a href=&quot;#1-模型-视图-控制器模式-MVC模式&quot; class=&quot;headerlink&quot; title=&quot;1.模型-视图-控制器模式 MVC模式&quot;&gt;&lt;/a&gt;1.模型-视图-控制器模式 MVC模式&lt;/h3&gt;&lt;p&gt;模型-视图-控制器模式(model-view-controller)简称MVC模式，它将您的代码独立分割为几个部分。模型部分定义应用程序的数据引擎，负责维护数据的完整性；视图定义应用程序的用户界面；控制器则充当模型和视图的桥梁，负责实现数据和现实的更新。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
