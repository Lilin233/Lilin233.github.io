<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[fastlane]]></title>
    <url>%2F2019%2F02%2F25%2Ffastlane%2F</url>
    <content type="text"><![CDATA[##使用背景早些时候我一直使用python执行脚本来完成项目的持续集成，在Apple发布Xcode9的时候脚本进行了更新，部分脚本被废弃，在那时候我转移到fastlane阵营，原因很简单，fastlane使用更简单，更方便，我不再需要因为苹果对脚本的更新来被迫修改我的方案。 ##fastlane介绍fastlane是一款持续集成工具，它的功能强大，使用简单，可以帮助我们处理一些费时的工作，比如生成截屏、处理配置文件、编译App、上传测试分发平台等。 fastlane is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application. ###开始使用fastlance ####安装fastlance安装Xcode command line tool的最新版本1xcode-select —install 使用工具安装fastlance12345#使用gem安装（确保你已经安装了ruby）sudo gem install fastlane -NV#或者使用Homebrew安装（确保已经安装了Homebrew）brew cask install fastlane ####配置fastlane在terminal中进入你的项目目录，执行以下代码：1fastlane init 接下来会根据你在安装时候的不同选择来创建不同的文件 screenshots TestFlight AppStore Manual这里选择4.Manual就好了，其他的功能后续也可以在配置文件中手动添加其中最需要注意的文件是fastlane/Fastfile，其中包含了你将要操作的所有信息 ####接下来要怎么做？fastlane创建了所有的必要文件给我们，现在你可以通过配置这些文件进行持续化集成 ###使用fastlane部署测试项目 ####编译fastlane 使用一个叫build_app的action来编译app，只要在Fastfile中加入下边代码：123lane :beta dobuild_app(scheme: &quot;MyApp&quot;)end 还可以在编译的时候加入其他的选项12345ane :beta dobuild_app(scheme: &quot;MyApp&quot;,workspace: &quot;Example.xcworkspace&quot;,include_bitcode: true)end ####上传app在编译完成后可以上传到你选择的分发测试平台，在fastlane你可以很简单的做到这个工作，甚至不需要做额外的工作就可以同时上传多个平台你可以选择上传的TestFlight，蒲公英，Fir，我们这里以蒲公英来举例：在这里你可以找到蒲公英的上传文档，你需要执行以下代码安装蒲公英插件···fastlane add_plugin pgyer修改Fastfile，在build_app后添加蒲公英代码1234lane :beta dobuild_app(export_method: &quot;ad-hoc&quot;)pgyer(api_key: &quot;7f15xxxxxxxxxxxxxxxxxx141&quot;, user_key: &quot;4a5bcxxxxxxxxxxxxxxx3a9e&quot;)end 做完这些配置后，你就可以通过fastlane来打包App，并自动上传到蒲公英，执行1fastlane beta， 你可以打开蒲公英，查看蒲公英提供的更多配置，比如添加密码，添加更新描述等。 接下来我会提供一个我正在用的Fastfile为大家提供参考12345678910111213141516default_platform(:ios)platform :ios dolane :test do#添加版本更新描述puts &quot;请输入版本描述：&quot;#获取输入的描述desc = STDIN.gets#依次配置workspagce，scheme，build configuration，和export_methodbuild_app(workspace: &quot;ProjectsName.xcworkspace&quot;, scheme: &quot;ProjectsName&quot;, configuration: &quot;Debug&quot;,export_method: &quot;development&quot;)#配置蒲公英的api_key,user_key,和输入的版本更新描述pgyer(api_key: &quot;59aa772ac06fe663xxxxxxxxxxxxxxx&quot;, user_key: &quot;0b18ced68eb3cc7xxxxxxxxxxxxxxxxxx&quot;, update_description: &quot;#&#123;desc&#125;&quot;)endend ###总结App的编译、打包、上传无趣又费时，使用fastlane可以提升效率，又可以节省我们的时间，不需要为了后续的操作一直盯着电脑。fastlane使用比较方便，这里我只是做一个简单的介绍，当然fastlane还提供了更多的功能，你可以在fastlane主页和fastlane github中找到更多的详细配置。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Reactivecocoa全解析 2.常用操作和高阶函数]]></title>
    <url>%2F2019%2F02%2F18%2F2-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%92%8C%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[RAC现在分了两部分，ReactiveCocoaObjc和ReactiveCocoaSwift,本文介绍的均是 ReactiveCocoaObjc 2.5.0 版本的内容. RAC的核心是信号源（RACStream），在RAC中，信号源代表随着时间而改变的流值，订阅者通过订阅信号来获取这些值，RACStream是一个抽象类，我们用到的最多的是它的之类 RACSignal和RACSequence，以下代码和示例使用的ReactiveCocoa 2.5版本 介绍RAC的操作之前先介绍以下链式操作 链式操作： 用过Masonry的同学应该对链式操作不陌生 123456789[self.label mas_makeConstraints:^(MASConstraintMaker *make) &#123;make.top.left.mas_equalTo(0);make.centerY.mas_equalTo(self.view);make.width.height.mas_greaterThanOrEqualTo(0);&#125;]; 这里的make.top.left.mas_equalTo(0); 就是一个链式操作，执行一个方法后的返回结果接着执行下一个方法，前边我们已经讲到RAC使用的是FPR编程思想，所以在RAC中你同样可以使用链式操作 我们修改一下上边的例子：12345678910111213[[RACObserve(self, username)filter:^(NSString *newName) &#123;return [newName hasPrefix:@&quot;j&quot;];&#125;]subscribeNext:^(NSString *newName) &#123;NSLog(@&quot;%@&quot;, newName);&#125;]; 订阅：subscribeNext 12345678910111213141516// When self.username changes, logs the new name to the console.//// RACObserve(self, username) creates a new RACSignal that sends the current// value of self.username, then the new value whenever it changes.// -subscribeNext: will execute the block whenever the signal sends a value.[RACObserve(self, username) subscribeNext:^(NSString *newName) &#123;NSLog(@&quot;%@&quot;, newName);&#125;]; 当username内容发生变化，就会打印出一个新的值。 RACObserve(TARGET, KEYPATH) 是RAC提供的一个宏，他可以创建一个新的signal，这里，我们通过subscribeNext方法对 signal进行订阅，当username内容发生变化时，就会在block中获取username的新值并进行打印 bind 对信号进行绑定，返回一个新的信号，它会订阅原信号的值，在bindingBlock中对原信号的值进行转换。 1234567891011121314151617181920212223242526272829303132333435363738394041RACSignal *orignSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@1];[subscriber sendCompleted];return [RACDisposable disposableWithBlock:^&#123;NSLog(@&quot;orign signal dispose&quot;);&#125;];&#125;];RACSignal *newSignal = [orignSignal bind:^RACStreamBindBlock&#123;return ^(NSNumber *value, BOOL *stop)&#123;return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@(value.integerValue * 2)];[subscriber sendCompleted];return [RACDisposable disposableWithBlock:^&#123;NSLog(@&quot;bind dispose&quot;);&#125;];&#125;];&#125;;&#125;];[newSignal subscribeNext:^(id x) &#123;NSLog(@&quot;newSignal value = %@&quot;, x);&#125;]; map:要完成对orign signal值得转换，使用map 和flattenMap是更简单的选择，这两个方法其实也是对bind方法的封装 1234567891011121314151617181920212223RACSignal *orignSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@1];[subscriber sendCompleted];return [RACDisposable disposableWithBlock:^&#123;NSLog(@&quot;orign signal dispose&quot;);&#125;];&#125;];[[orignSignal map:^id(NSNumber *value) &#123;return @(value.integerValue * 2);&#125;]subscribeNext:^(id x) &#123;NSLog(@&quot;new value is %@&quot;, x);&#125;]; flattenMap 返回的是一个新的signal 1234567891011121314151617RACSignal *newSignal2 = [orignSignal flattenMap:^RACStream *(NSNumber * value) &#123;return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@(value.integerValue * 2)];return nil;&#125;];&#125;];[newSignal2 subscribeNext:^(id x) &#123;NSLog(@&quot;new value2 is %@&quot;, x);&#125;]; filter:对seguence遍历后进行过滤，将不符合条件的数据进行过滤掉，返回一个新的sequence nameArray.rac_sequence是将array转换为sequence，sequence代表了一个不可变的序列，它可以被订阅者订阅，而且还可以跟signal很方便的进行转换 123456789NSArray *nameArray = @[@&quot;tom&quot;, @&quot;jerry&quot;, @&quot;tomas&quot;, @&quot;link&quot;];NSArray *resultArray = [nameArray.rac_sequence filter:^BOOL(NSString *name) &#123;return name.length &gt; 3;&#125;].array;NSLog(@&quot;%@&quot;, resultArray); combineLatest 使用一个signal数组，当数组中的任意一个signal值发生变化时，就在block中对所有signal最后一个值进行处理，最后返回一个新的signal。 12345self.validLoginSignal = [[RACSignal combineLatest:@[RACObserve(self, username), RACObserve(self, password)] reduce:^(NSString *username, NSString *password)&#123;return @(username.isExist &amp;&amp; password.isExist);&#125;] distinctUntilChanged]; zip 对多个信号的值进行压缩后创建一个RACTuples， zip将对每一个signal的值以配对的形式进行合并，比如signalA发送1和3，signal发送了2，那么合并后的Tuples包含了signal的1和signal的2。这里是zip和combineLatest最大的区别，在这里使用combineLatest会得到3和2，因为会重复利用signalB的旧值 123456789101112131415161718192021222324252627282930313233RACSignal *signalA = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@1];[subscriber sendNext:@3];[subscriber sendCompleted];return nil;&#125;];RACSignal *signalB = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123; [subscriber sendNext:@2];[subscriber sendCompleted];return nil;&#125;];[[RACSignal zip:@[signalA, signalB]] subscribeNext:^(id x) &#123;NSLog(@&quot;zip %@&quot;, x); //==&gt;1，2&#125;];[[RACSignal combineLatest:@[signalA, signalB]] subscribeNext:^(id x) &#123;NSLog(@&quot;combineLatest: %@&quot;, x); //==&gt;3，2&#125;]; merge 对多个signal进行合并，会监听到任意一个signal值得变化，并返回这个signal最新的值，当所有的signal发送complete时候会发送complate，当任意一个signal发送error立刻就发送error 12345[[RACSignal merge:@[signalA, signalB]] subscribeNext:^(id x) &#123;NSLog(@&quot;x = %@&quot;, x);&#125;];]]></content>
  </entry>
  <entry>
    <title><![CDATA[Reactivecocoa全解析 1.FRP编程思想]]></title>
    <url>%2F2019%2F02%2F18%2F1-FRP%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%2F</url>
    <content type="text"><![CDATA[ReactiveCocoa全解析 1.FRP编程思想 ReactiveCocoa是我在开发工作中重度使用的一个开源框架，当你使用MVVM设计模式的时候，它几乎是你最好的选择，当然你也可以使用其他的一些方式来完成数据绑定，KVO，delegate或者是block，但是RAC为你提供了更优雅更安全的绑定方式，我们可以使用RAC在View和ViewModel中充当binder的角色来实现数据的同步，也可以把RAC放在ViewModel层，使用signal来异步获取数据，比如网络请求，访问数据库等。 因为RAC是一个使用起来并不那么容易的开源框架，所以接下来我会分几个部分来介绍它： FRP 的思想概要 （oop和fp） RAC 的 operations 介绍 冷信号与热信号解惑 生命周期指南 disposable 和多线程 实战分享 ReactiveCocoa是Gitbub开源的一个函数响应式编程框架，它是iOS上的函数响应式编程（FRP）体现，要理解RAC，首先我们就要理解函数响应式编程（FRP），刚开始接触FRP可能有一些困扰，因为它和我们以往的编程方式区别很大，接下来我们回顾一下现在常用的编程方式：面向对象编程（OOP）和面向协议编程（POP） ###面向对象编程（OOP从我们刚开始学习编程，接触到的最多就是面向对象编程（OOP），OOP的优点很多，继承，抽象，多态，可重用性，可维护性等等，我们从很早就知道了万物皆可盘（误 ，应该是万物皆对象的编程思想，当然有人也有一些质疑，比如结构体和对象的关系等，抛开这些争论，面向对象仍然是一种灵活的，易于维护的编程方式。 ###面向协议编程（POP）面向协议编程（POP）是我在使用Swift时用到的编程方式。我在15-16年中使用Swift来完成编程工作，现在因为一些原因我又回到了Objective-C阵营，但我仍无比的怀念Swift，其中一个重要原因，就是Swift对面向协议编程的友好支持。 苹果公司声明：从核心上说，Swift是面向协议的 POP拥有OOP的大部分特点，他们之间最大的区别是：类只能继承一个类（这里只讨论iOS开发语言，像一些编程语言比如C++的确拥有多继承，但是多继承在工作中仍然不是一个很好的特性），而类可以实现多个协议。我们可以举一个例子，如果现在要创建漫威英雄的类，我们要怎么创建？ 创建一个父类,拥有fly，land方法， SuperHero：fly（），land() 子类Super Man： 子类Iron Man： 子类Spider Man： 我们都知道小蜘蛛是没有飞行能力的，所以在这里将fly和land方法放在父类中并不可行，我们必须在父类删除fly和land，在超人和钢铁侠中单独加入fly和land，但是拥有飞行能力的超级英雄并不少见，我们接下来不得不为猎鹰，幻世，绯红女巫他们挨个加上。所以面向对象在这里并不是很可靠，换个思路，这里我们用POP试一下 创建一个fly协议，拥有fly和land两个方法，因为飞行和降落都是对应的，所以这里没有什么问题，接下来我们只要将拥有飞行能力的超级英雄实现fly协议，这样使用这个fly协议的超级英雄就拥有了飞行能力，当然我们也可以建立更多的协议，来为超级英雄增加更多的能力。 编程思想并没有孰优孰劣，我们这里只是做一个简单介绍，接下介绍一下今天的重点，函数响应式编程（FRP）。 ###函数响应式编程（FRP）FRP全称Function Reactive Programing，它包含了两个部分，函数式编程 Function Programing（FP）和响应式编程 Reactive Programing（RP）, ####响应式编程 我们先来看一段代码， int a = 3; int b = 5; int c = a + b; a = 8; NSLog(@“c = %d”, c); //8 这是我们熟悉的编程方式，首先为a和b进行赋值，然后将a + b的指赋给c，打印c的结果为8，接下来修改a和b的值后重新打印c，此时c的值仍然是8。因为代码中的 a + b只是一个瞬时的操作，并不是一段关系的描述。 而响应式编程是一种面向数据流和变化传播的编程范式，这意味着可以再编程语言中很方便的表达静态和动态的数据流，而相关的计算模型会自动将变化的值通过数据流进行传播，所以在响应式编程中，上述例子中的c 会跟根据a、b值得变化而发生变化 在app的登录界面中，我们常常需要通过判断用户名和密码是否填写合法后来设置登陆按钮的可点击状态，这里我们可以对userNameTextField和passwordTextField进行监听，然后将监听的结果合并后进行合法性判断，最后将处理的结果绑定到登陆按钮上，这在RAC中是一个最常用的写法，当userNameTextField和passwordTextField发生变化时，登陆按钮的状态会相应的发生变化。 1234567891011RAC(self.viewModel, username) = self.usernameTexField.rac_textSignal;RAC(self.viewModel, password) = self.passwordTextField.rac_textSignal;self.validLoginSignal = [[RACSignal combineLatest:@[RACObserve(self, username), RACObserve(self, password)] reduce:^(NSString *username, NSString *password)&#123;return @(username.isExist &amp;&amp; password.isExist);&#125;] distinctUntilChanged];RAC(self.loginButton, enabled) = self.viewModel.validLoginSignal; ​​​ 另外一个典型的例子，在iOS开发中我们用Autolayout设置约束来描述视图之间的位置关系，当某一个约束发生改变后，其他的约束就会响应发生变化，这里也是响应式编程的体现。​​ ####函数式编程​​ 函数式编程将计算机运算视为函数运算，并且避免使用程序状态和易变对象，在函数式编程中函数可以像其他数据类型一样，处于平等的地位，可以作为参数传递到另一个函数中，可以赋值给其他的变量，也可以做为别的函数的返回值。​​ 我们可以使用RAC提供的一系列高阶函数来实现函数式编程，比如map，falltenMap,,filter,reduce,merge,combinte等等，在接下来的文章中我会介绍一下RAC为我们提供的常用的高阶函数。​​​ 到这里大家应该已经对FRP编程思想有一些认识，接下来我会介绍以下RAC为我们提供的高阶函数，已经如何如果使用它们来解决开发工作中可能遇到的一些问题。​​​​​​​​​​ 说了这么多，那么使用FRP到底有什么好处呢，我觉得使用FRP可以为我们解决以下几个问题：​​ 过多的状态值​​ vc中的冗余代码​​ 消息传递机制​​ Event之间的组合，交互​​ 多请求的处理​]]></content>
  </entry>
  <entry>
    <title><![CDATA[cocoaThinking重启计划]]></title>
    <url>%2F2019%2F02%2F01%2F%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%2F</url>
    <content type="text"><![CDATA[我在2015年开通了自己的博客，博客通过hexo+github搭建，博客开通的虽早，但是写作确没有怎么坚持下来，2015年到现在零零散散的写了不到10篇，多数还是在15年趁着刚刚搭建完的热乎劲写成，实在汗颜。2019阴历新年马上就要到了，我决定制定一个cocoaThinking重启计划，一方面写一写技术总结，另一方面也有地方可以写一下日常的生活点滴。这次博客的重启，我更新了一些必要工具，hexo，node，npm，还有hexo的模板Next，更新的时候我发现node的版本从当时的0.10升级到了11.15，hexo和next也都完成多个版本的升级，不得不感慨时光匆匆，几年的时间过的真快，当时搭建博客的时候和我的同事showndu一起研究讨论问题的场景还是历历在目，这也更坚定了我对这次重启计划的决心。看了一下自己以前写的文章，多数因为年代久远已经过时了，剩下的几篇比如《iOS常用设计模式》，因为当时的自己较为年轻，写的文章也有很多不足。所以会对之前的文章进行清理，过时的删掉，不足的会进行修改补充。接下来先完成这部分工作吧。]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS9 Search API NSUserActivity]]></title>
    <url>%2F2015%2F09%2F25%2FNSUserActivity%2F</url>
    <content type="text"><![CDATA[在WWDC2015会议上，苹果公布了iOS9系统，iOS9系统相比iOS7、iOS8并没有特别大得变化，可以看做是iOS8的基础上进行的平滑的过度。但是新的系统中仍有一些特性和功能值得人们去关注，其中Search API就是其中之一。通过新的Search API可以实现强大的应用内搜索功能，通过在Spotlight中使用我们设计的所以，来查看app中的界面或是内容。 iOS9的 Search API由三个组件组成：1.NSUserActivity2.Web Markup3.Core Spotlight现在介绍一下NSUserActivity的使用NSUserActivity是在iOS8中出现的API，主要用户HandOff功能，iOS9中NSUserActivity新增加了一个属性 eligibleForSearch 来控制在Spotlight中的显示 定义一个NSUserActivity属性1@property (nonatomic, strong)NSUserActivity *activity; 初始化NSUserActivity,并设置属性1234567891011121314151617//ActivityType为唯一标识_activity = [[NSUserActivity alloc]initWithActivityType:@&quot;Eden&quot;];//title app在Spotlight中显示的名称，可以和app名称不一样，多个app使用相同的keywords，初始通过title名称进行排序_activity.title = @&quot;Eden&quot;;//Spolight搜索关键字_activity.keywords = [NSSet setWithArray:@[@&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Eve&quot;]];//关闭HandOff功能_activity.eligibleForHandoff = NO;//开启Spotlight search功能_activity.eligibleForSearch = YES;//开启NSUserActivity[_activity becomeCurrent]; 当做完这些操作时候然后运行程序，我们在spotlight中搜索 adam, lilith, eva中的某一个关键字就会找到我们的应用，此时选择应用会直接跳转到app的首页。有时候我们希望最好能通过某个关键字直接跳转到app其中某一页，幸运的是NSUserActivity同样支持这个功能。 准备工作：创建AdmaViewController，LilithViewController我们在AdmaViewController中创建adamUserActivity,title为adamView, 关键字adam我们在LilithViewController中创建lilithUserActivity, title为lilithView,关键字lilith可以在首页通过adam跳转到admaViewController可以在首页通过lilith跳转到lilithViewController 开始工作：找到AppDelegate文件，添加方法 //在主线程下存在可用NSUserActivity对象时候调用123456789- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler&#123;//找到当前的window的rootView转换为UINavigationController(如果你的rootView是UINavigationController的话) UINavigationController *navigationController = (UINavigationController *)self.window.rootViewController;//找到navigationController的topView（首页） 中restoreUserActivityState方法 [navigationController.topViewController restoreUserActivityState:userActivity]; return YES;&#125; 在首页中重写restoreUserActivityState方法 1234567891011121314- (void)restoreUserActivityState:(NSUserActivity *)activity&#123;//通过Spotlight中传过来的NSUserActivity对象的title判断具体跳转到哪一页 if ([activity.title isEqualToString:@&quot;Adam&quot;]) &#123; AdamViewController *adamView = [[AdamViewController alloc]init]; [self.navigationController pushViewController:adamView animated:YES]; &#125;else if([activity.title isEqualToString:@&quot;Lilith&quot;])&#123; LilithViewController *lilithView = [[LilithViewController alloc]init]; [self.navigationController pushViewController:lilithView animated:YES]; &#125;else if([activity.title isEqualToString:@&quot;Eve&quot;])&#123; EveViewController *eveView = [[EveViewController alloc]init]; [self.navigationController pushViewController:eveView animated:YES]; &#125;&#125; 现在当选择再Spotlight中搜索adam，选择应用会直接跳转到 adamViewController中，搜索lilith关键字，选择应用会直接跳转到lilithViewController中 本文代码下载地址]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS9</tag>
        <tag>Search API</tag>
        <tag>NSUserActivity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NSArray和NSMutableArray]]></title>
    <url>%2F2015%2F08%2F26%2F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组作为存储对象的有序集合，可能是平时用到的最多的集合类。NS数组中存放的是Fundation对象，简单类型比如int，float等可以封装为NSNumber对象来存放到数组中。Objc中数组分为不可变数组和可变数组，可变数组使用NSMutableArray来处理，不可变数组为NSArray，NSMutableArray是NSArray的子类，也就是说继承了NSArray得所有方法 1.创建一个数组创建一个NSArray1234567NSArray *array = [NSArray arrayWithObjects:@1, @2, @3, nil];NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:10];NSMutableArray *array2 = [NSMutableArray array];NSMutableArray *array1 = [[NSMutableArray alloc]initWithCapacity:0]; 使用initWithCapacity方法可以在初始化数组的时候添加一个预留空间，在数组空间超过这个预留空间时候会进行自动追加。不过是再测试中发现这样做并没有提高应有的效率，传言苹果实际上没有采用这个参数。不过这样有个好处是可以做为一个隐性文档来提高代码可读性。 在创建NSArray数组的时候也可以使用语法糖，相对于调用方法更加简单快捷1NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;]; 2.NSArray 和NSMutableArray 转换//NSMutableArray 转换NSArray12345// 创建可变数组NSMutableArray *mutableArray = [NSMutableArray array];// 使用copy方法获得一个NSArray。使用三木运算符判断当NSArray为nil时候重新初始化一个新的对象// x?:y == x?x:y; NSArray *array = [mutableArray copy]?:[NSArray array]; //NSArray 转换NSMutableArray123456//初始化一个NSArrayNSArray *array = @[@7, @2 ,@0 ,@1, @6, @8, @3] ;// 使用mutableCopy方法获得一个NSMutableArrayNSMutableArray *mutableArray = [array mutableCopy]?:[NSMutableArray array];//使用类方法arrayWithArray进行转换NSMutableArray *mutableArray2 = [NSMutableArray arrayWithArray:array]; 3.查找对象1id object = [array objectAtIndex:index]; 同样可以通过语法糖获取1id object = array[index]; NSArray提供firstObject, lastObject,方法获取数组的首尾对象，当数组为空时候返回nil。而使用常规方法获取空数组中的对象则会返回NSRangeException异常12id lastObject = [array lastObject];id firstObject = [array firstObject]; 为了方便数组中数据量很大的情况下查找数据，苹果已经预先实现二分查找法来遍历数组，这样查询效率将大大提高12345678910NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];NSMutableArray *mutableArray = [NSMutableArray array];NSRange range = NSMakeRange(0, 5);NSInteger index = [array indexOfObject:@0 inSortedRange:range options:NSBinarySearchingInsertionIndex usingComparator:^NSComparisonResult(id obj1, id obj2) &#123; if (obj1 &lt; obj2) &#123; return NSOrderedAscending; &#125; return NSOrderedDescending;&#125;];id object = mutableArray[index]; 4.排序有很多方法可以对数组进行排序，如果数组中存放的是字符串对象，可以使用sortedArrayUsingSelector:方法进行排序12NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;];NSArray *newArray = [array sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)]; 如果数组存放的是数字，可以使用compare:方法进行排序12NSArray *array = @[@4, @0, @8, @9, @11];NSArray *newArray = [array sortedArrayUsingSelector:@selector(compare:)]; 可是使用reverseObjectEnumerator.allObjects获得一个数组的逆序排列12NSArray *array = @[@4, @0, @8, @9, @11];NSArray *newArray = array.reverseObjectEnumerator.allObjects; 5.枚举从一个数组过滤一些元素，组成另一个数组使我们经常遇到的一个场景，同样Objc提供了很多方法可以实现1.快速枚举 NSFastEnumeration(for in)使用快速枚举在数组数据量较大的情况下效率会比传统的for循环提高很多，而且快速枚举代码的可读性也更高1234567NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];NSMutableArray *newArray = [NSMutableArray array];for (NSString *godName in array) &#123; if ([godName containsString:@&quot;l&quot;]) &#123; [newArray addObject:godName]; &#125; &#125;NSLog(@&quot;%@&quot;,newArray); 2.使用indexesOfObjectsWithOptions方法当数据量很大的情况下，使用indexesOfObjectsWithOptions方法的NSEnumerationConcurrent参数可以开启同步执行，但这也只是在数据量很大的情况下，当数据量较少时候因为需要额外的线程管理效率会变得更低一些123456789101112NSArray *array = @[@&quot;Eve&quot;, @&quot;Adam&quot;, @&quot;Lilith&quot;, @&quot;Lilin&quot;, @&quot;Satan&quot;, @&quot;Lilim&quot;];NSIndexSet *indexSet = [array indexesOfObjectsWithOptions:NSEnumerationConcurrent passingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop) &#123; if ([obj isKindOfClass:[NSString class]]) &#123; NSString *godName = obj; if ([godName containsString:@&quot;l&quot;]) &#123; return obj; &#125; &#125; return nil; &#125;];NSArray *newArray = [array objectsAtIndexes:indexSet];NSLog(@&quot;%@&quot;,newArray);]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS常用设计模式]]></title>
    <url>%2F2015%2F08%2F12%2FiOS%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[所有的iPhone应用程序都是基于UIKit框架构建而成的，所以它们在本质上具有相同的核心架构。 UIKit框架的设计模式 结合了很多在Mac OS X Cocoa应用程序中使用的设计模式，理解这些设计模式对于创建iPhone程序是很关键的。 1.模型-视图-控制器模式 MVC模式模型-视图-控制器模式(model-view-controller)简称MVC模式，它将您的代码独立分割为几个部分。模型部分定义应用程序的数据引擎，负责维护数据的完整性；视图定义应用程序的用户界面；控制器则充当模型和视图的桥梁，负责实现数据和现实的更新。 2.目标-动作控件通过目标-动作的模式将用户的交互通知您的应用程序，当用户以预先定义好的动作（比如点击一个按钮）进行交互时，空间就会将消息（动作）发送给您制定的对象（目标）。接收到动作消息后，目标对象就会以恰当的方式相应（比如按动按钮的时候刷新应用程序的状态）。 3.单例模式单例模式确保一个给定类只有一个实例出现，这个实例有一个全局的访问点，它通常使用懒加载的时候在第一次使用的时候再取加载注意：苹果使用了大量的单例模式，我们用到的[UIAppliacation shareapplication],[UIScreen mainscreen],[NSUserDefaults standardUserDefaults] 等返回的都是一个单例对象。在一些情况下使用单例模式会是非常合理的，比如你需要一个全局配置处理类，使用单例模式就会很好的实现。使用GCD的方式可以很容易实现一个单例模式 1234567891011+(Singelton)shareInstance&#123; // 1 static Singelton *st; // 2 static dispatch_once_t onceToken; // 3 dispatch_once(&amp;onceToken,^&#123; st =[[Singelton alloc]init]; &#125;); return st;&#125; 在这段代码中有三个需要注意的地方： 声明一个static静态变量保存实例变量，确保它在类中的全局可用性。 声明一个static静态dispath_once_t，确保初始化代码只执行一次 使用 Grand Center Dispatch (GCD)执行Singelton变量block，正式单例模式的关键，一旦类被初始化，初始化器就不会再被调用下次再调用shareInstance的时候，dispatch_once块中得代码将不会执行（因为他已经被执行了一次），你将得到已经初始化好的类 4.代理设计模式代理设计模式 一个对象提供机会对另一个对象发生变化时候做出反应。代理模式基本思想：两个对象协同解决问题，通常用于对象之间的通信 Cocoa 框架中同样运用了大量的代理模式，每个UI控件后边都声明了一个id类型的delegate或是datasource，比如说最常用到的UITableView 控件头文件中声明了：12@property (notamatic, assign)id &lt;UITableViewDataSource&gt; datasource; @property (notamatic, assign)id &lt;UITableViewDelegate&gt; delegate; 即这个代理要遵循某一个协议。]]></content>
  </entry>
</search>
